export const articleContent = {
    title: 'article101',
    //body: "Last summer, I was bugging my boss [Joe Drumgoole](https://twitter.com/jdrumgoole) for a promotion. I asked him what I needed to do in order to get promoted. He explained that I was doing great work, but I needed to raise my profile internally at the company. He said that my MongoDB colleagues needed to know my name and my work.\n\nThis advice felt exceptionally challenging as we were in the middle of the pandemic, and I had no hope of seeing my colleagues in person and striking up an impromptu conversation. I realized I was going to have to work strategically to raise my profile.\n\nI sought the advice of [Ken Alger](https://www.linkedin.com/in/kenwalger/) who provided me with several suggestions on how to raise my profile. I disliked his advice as it was going to push me out of my comfort zone, but I decided to try it anyway.\n\nKen's advice worked. I raised my profile and was rewarded with a promotion.\n\n![A comic book style animation of a conversation between Lauren, Joe, and Ken about getting a promotion](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Raise_Your_Profile_e40bad22ef.gif \"An overly dramatic recreation of conversations I've had with Joe and Ken\")\n\nThis concept of raising my profile has been a common thread throughout my career. When I was a full-time software engineer, my managers talked with me about expanding my scope and demonstrating influence.\n\nPerhaps you've received similar feedback—you need to raise your profile, expand your scope, or demonstrate influence. Or perhaps you're doing amazing work and you've been trying to figure out what you need to do in order to get your next promotion.\n\nIn this article, I'll answer the following questions:\n\n* [What is your profile?](#what-is-profile)\n* [What does it mean to raise your profile?](#what-raise-profile)\n* [Why should you bother raising your profile?](#why-raise-profile)\n* [What steps can you take to raise your profile?](#steps-raise-profile)\n* [How can you make a plan to raise your profile?](#plan-raise-profile)\n\n> [Luce Carter](https://twitter.com/LuceCarter1) and I recently hosted a live stream on this topic. Check out the recording below: :youtube[]{vid=Z3tgvOZdinM}\n\n## <a name=\"what-is-profile\"></a>What is your profile?\n\nBefore we dig into the \"why\" and \"how,\" let's get on the same page about what your profile is. Your profile describes who you are, what you can do, and what you are known for. Let's discuss each piece.\n\n### Who you are\n\nThe first thing people need to know is who you are professionally: things like your name, your role or title, and your company. Internally at your company, people also need to know your location within the company: things like your team, department, organization, and/or manager.\n\nAs an example, here are some facts about who I am:\n\n* Name: Lauren Schaefer\n* Title: Staff Developer Advocate at MongoDB\n* Location in my company: DevRel Team under [Rita Rodrigues](https://twitter.com/RitaMRDevIT)\n\n### What you can do\n\nThe next part of your profile is what you can do. Consider both your technical skills as well as your soft skills.\n\nHere are some things I can do:\n\n* Build web apps in JavaScript and Node.js\n* Discuss MongoDB data modeling best practices\n* Build CI/CD pipelines\n* Keynote conferences\n* Provide team glue through activities like the MongoDB DevRel Book Club\n\n### What you are known for\n\nThe final piece of your profile is what you are known for both internally at your company and externally in the wider developer community. Include technical skills and soft skills (duplicating items from the previous section is totally fine), values, traits, and other things you do.\n\nBelow are some things I'm known for:\n\n* Creating engaging and easy-to-understand content\n* Completing tasks and projects on time with excellence and minimal supervision\n* Being detail- and action-oriented\n* Advocating for remote work\n* Creating silly [TikToks](https://www.tiktok.com/@lauren_schaefer) about life as a developer\n\n## <a name=\"what-raise-profile\"></a>What does it mean to raise your profile?\n\nNow that we're on the same page about what a profile is, let's talk about how to \"raise\" it. Raising your profile means increasing the number of people who know your profile.\n\n<div align=\"center\">\n<figure>\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/raisetheroof_cd5ef2f997.gif\" alt=\"Michael and Dwight raise the roof\"/>\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Raising your profile is not the same as raising the roof</figcaption>\n</figure>\n</div>\n\nYou'll likely want to work to raise your profile internally at your company and externally in the broader developer community.\n\nWhen considering how to raise your profile internally, think about working your way from your immediate team all the way up to your executive team:\n\n* Team\n* Management\n* Department\n* Company\n* Executive team\n\nWhen considering how to raise your profile externally, you have a variety of options:\n\n* Former colleagues or classmates\n* Local developers\n* Global developer community (in person or online)\n\n## <a name=\"why-raise-profile\"></a>Why should you bother raising your profile?\n\nRaising your profile might seem like a lot of work. If you're like me, you'd probably rather put your head down and get stuff done instead of putting in the effort to let people know about you.\n\nSo why should you bother raising your profile? Let's discuss four major reasons.\n\n### Meet *explicit* promotion requirements\n\nRaising your profile is a fairly common theme to see in the promotion requirements for software engineers and developers. Some companies focus more on internal influence while others focus more on external influence. Either way, companies want to see that you have a growing reputation.\n\nLet's take a look at some engineering career frameworks, using examples I’ve borrowed from other companies:\n\n* [Patreon's Engineering Levels](https://levels.patreon.com/) outlines their expectations for IC1 (Individual Contributor 1) all the way up to IC6 (Individual Contributor 6). The document has several categories including influence. As they move higher up the individual contributor ladder, engineers are expected to broaden their influence throughout the company and eventually to the entire industry.\n* [The Medium Engineering Growth Rubric](https://docs.google.com/spreadsheets/d/1EO-Dbsayn8Nz9Ii3MKcwRbt-EIJ2MjQdpoyhh0tBdZk/edit#gid=1098466721) defines engineers' growth progression throughout many categories. One of the categories they include is Evangelism. Their engineers progress from influencing \"individuals\" to \"small events\" to \"large groups\" to \"the whole industry\" to \"a wider audience outside the industry.\"\n* [The Khan Academy Engineering Career Development](https://docs.google.com/document/d/1qr0d05X5-AsyDYqKRCfgGGcWSshTMd_vfTggfhDpbls/edit) document describes how their engineers grow in skills, scope, and experience throughout their careers. The document has a section specifically on \"evangelism and public artifacts\" with the goal of recruiting top engineers to the company. Khan Academy incentivizes their engineers to share their work with the broader community through activities like blogging, contributing to open source projects, giving tech talks, and participating in meetups and hackathons.\n\n### Meet *implicit* promotion requirements\n<figure style=\"clear: both;float: right;\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181421_c885c6e66a.jpg\" alt=\"Group of peple having a meeting at a conference table filled with laptops and notepads\" style=\"float:right;width:400px;margin-bottom: 10px;\" />\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nRaising your profile is commonly part of the *implicit* promotion requirements.\n\nEvery company handles promotions differently, but, in most cases, your manager will not be able to give you a promotion on their own. At the lower levels, your manager's manager and possibly your manager's peers will need to approve your promotion.\n\nAs you get into the higher levels, leaders across your organization and your company will need to agree to your promotion. The management team and executives need to know who you are and the work that you do in order to approve the promotion.\n\n### Take advantage of new opportunities\n\nAs you raise your profile, doors will begin to open for you. Some doors you'll strive to open yourself and others will unexpectedly swing open.\n\nBelow are examples of opportunities that may arise as you raise your profile:\n\n* A leadership opportunity\n* A new role at your company\n* A new job at another company\n* An invitation to speak at a conference, a live stream, or a podcast\n* An invitation to write a guest article or author a book\n* New connections with other industry leaders\n\n### Recruit other top developers to work with you\n\n<figure style=\"clear: both;float: left; margin-left: 0px; margin-bottom: 0px;padding-bottom: 0px;\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_linda_ellershein_3127883_55a26ec2ee.jpg\" alt=\"The words 'JOIN OUR TEAM' spelled out with magnetic letters. Multi colored lollipops surround the words.\" style=\"float:left;width:200px;margin-bottom: 10px;\" />\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nDevelopers love to work with other amazing developers. As you and your teammates build your profiles, your company's reputation will begin to grow. Top developers will want to work with you.\n\nIf your company has referral bonuses, attracting top developers to work with you has a nice monetary perk. Either way, you'll get to work with other amazing developers.\n\n\n## <a name=\"steps-raise-profile\" ></a> What steps can you take to raise your profile?\n\nNow that you know what it means to raise your profile and why you should put in the effort to do it, let's talk about how you can do it. In this section, I'll discuss 10 ways you can raise your profile.\n\n### 1\\. Become the go\\-to person\n\n![Picture of a woman coding with a Python book beside her](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181359_1_bc08a20e58.jpg \"Photo by Christina Morillo from Pexels\")\n\nBecome the go-to person for a particular language (e.g., Python), a technology (e.g., Kubernetes) or a common challenge that customers face (e.g., how to model data in MongoDB). Be that go-to person for your team or your entire company.\n\nAs an example, Dropbox specifically calls out \"Domain Expertise\" in their [career framework](https://dropbox.github.io/dbx-career-framework/what_is_impact.html). As their engineers grow their careers, they are expected to be the authority on a platform, a field, or a product category. Dropbox desires for their engineers to grow in depth or breadth.\n\n### 2\\. Contribute to open\\-source or public projects\n\nContributing to open-source or public projects is a great way for other developers to see your work. Being a contributor or a maintainer in a popular open-source project can give you a lot of visibility.\n\nIf, like me, you don't enjoy coding in your off-hours, see if there is a way you can code in the open at work. Your company may also see the value in contributing to open-source projects or developing in the open.\n\nYou may also want to create a readme for your GitHub profile page to let people know a little about you. [Joe Karlsson](https://my.link.gallery/joekarlsson) has a nice [60-second tutorial](https://www.tiktok.com/@joekarlsson/video/6943307561995193606) on how you can easily do this with just a markdown file.\n\n### 3\\. Be the news reporter for your team\n\nReporting the news for your team is an easy way to get your name out wider than your core development team. Below are some examples of how you can report the news.\n\n* **Report the news to a cross-functional team.** If someone on your team needs to be a representative as part of a larger cross-functional team, volunteer to be that person. You'll bring status updates, but you can also become known as the person who identifies or solves problems as the larger team works together. You can also become known as the expert on your part of the project.\n* **Report the news to the executives.** If someone needs to report status to the executives, volunteer. This is a great way to get to know the executive team as they'll see your face on a regular basis.\n* **Curate an internal or external newsletter.** If you're not a fan of extra meetings, you can volunteer to curate an internal or external newsletter that provides updates about your piece of the product or the product as a whole. As an example, [Adrienne Tacke](https://twitter.com/AdrienneTacke) posts a weekly newsletter on the [MongoDB Community](https://www.mongodb.com/community/forums/u/yo_adrienne/activity/topics) and [dev.to](https://dev.to/mongodb). The newsletter covers all the amazing things our Developer Advocacy team is doing.\n\nKeep in mind that, depending on your company culture, reporting the news can become seen as a task that has less value than other, more technical tasks. Be sure you tailor the role in a way that gives you a lot of visibility and provides value to others.\n\n### 4\\. Write blog posts or articles\n\n<figure style=\"clear: both;float: right;\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_pixabay_261662_2a2105e249.jpg\" alt=\"Zoomed in picture of a person's hands on a laptop while they write on their blog\" style=\"float:right;width:400px;margin-bottom: 10px;\" />\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Photo by Pixabay from Pexels</figcaption>\n</figure>\n\nIf you want to be seen as an expert on something, write about it.\n\nOthers may know more about a topic than you do, but don't let that stop you. If you're writing about something, people will assume you know what you're talking about.\n\nYou can write about things you already know or things you are learning. Writing about topics you don't already know is a great way to reinforce your learning.\n\nA multitude of options exist for where you can write:\n\n* Your company may have an engineering blog.\n* You can create your own personal blog.\n* You can use an existing blogging platform like dev.to or Medium that allows you to write without spinning up your own blog.\n\n### 5\\. Give tech talks\n\nGive a tech talk. You can give your talk at a small Lunch and Learn at your company or a huge international conference or anywhere in between. You can even give tech talks online by live streaming on Twitch or YouTube.\n\nWhether you're a seasoned expert or brand new to coding, you have a story to tell. You can talk about your favorite technology, best practices, or how you really messed something up (people love failure stories).\n\nMany people have a fear of public speaking. It's normal. Don't let that fear stop you. Start in small venues where you feel comfortable and take baby steps to other venues.\n\nFor tips on how to get started speaking at conferences, check out [this article](https://bcrecworks.medium.com/an-interview-with-lauren-schaefer-speaker-and-developer-advocate-at-mongodb-2f41ed9aedb5) where I was interviewed about how I got started with public speaking.\n\nIf you're interested in speaking about MongoDB at a conference, check out the [MongoDB Community Speakers Program](https://www.mongodb.com/developer/community/speaker-program/). You can apply to work with a speaking coach and get funding to attend a conference.\n\n### 6\\. Post on social media\n\n<figure style=\"clear: both;float: left; margin-left: 0px;\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_tracy_le_blanc_607812_21e69e3608.jpg\" alt=\"Zoomed in picture of a person's hand holding a phone that is displaying their social networking apps\" style=\"float:left;width:400px;margin-bottom: 10px;\" />\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nMaybe you love it or maybe you hate it, but it's hard to deny that social media is a great way to raise your profile.\n\nYou can create bite-sized content on platforms like Twitter, LinkedIn, Instagram, and TikTok. Or you can create longer, more in depth content on Twitch, YouTube, or a podcast. Posting to all of those platforms might seem a bit daunting, but you can likely reuse or recycle the same content.\n\nYou may be surprised to learn that posting to social media not only helps you raise your profile externally, it can also help you raise your profile internally. Colleagues who you may not interact with regularly during work hours may see your posts on social media. This has certainly been the case for me as people across MongoDB have been amused with my TikToks that I've posted on LinkedIn.\n\n### 7\\. Lead an employee networking group\n\nLeading an employee networking group is a great way to get connected with other people throughout your company and demonstrate leadership. Sometimes executives join these groups, providing you with an opportunity to get to know them in an informal setting.\n\nCompanies have different names for employee networking groups. I've also heard them called affinity groups or business resource groups. These are groups at your company for a particular set of people with a common interest or demographic.\n\nI will add a caveat to this recommendation. Some companies really value the work people do in leading these networking groups. Other companies see these as nice-to-have groups that don't provide a lot of value to the business. Be sure you can frame your work in these groups in a way that matters to your management team.\n\n### 8\\. Attend\\, host\\, or speak at a meetup or hackathon\n\nMeetups and hackathons allow you to get connected with other people in your local community. You never know what opportunities will arise from these connections.\n\nHosting a meetup doesn't require any technical skills, but, if you execute the meetups consistently, people will see you as a leader in your local tech community. Attending and asking thoughtful questions will also aid in you being seen as a technical leader.\n\n### 9\\. Answer questions publicly online\n\nAnswering questions publicly online in forums provides value to others and increases your name recognition. Be sure your answers are kind, thoughtful, and accurate. As you begin to answer questions more regularly, your reputation will grow.\n\nIf you'd like to give this a try, join the [MongoDB Community](http://community.mongodb.com/). You can share your tips, tricks, and best practices with others.\n\n![Screenshot of the front page of the MongoDB Community](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_12_18_58_PM_a092a9ab07.png \"Join us in the MongoDB Community\")\n\n### 10\\. Advertise your work\n\n<figure style=\"clear: both;float: right;\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_andrea_piacquadio_3761509_df6dee482b.jpg\" alt=\"Picture of a woman happily shouting into a megaphone\" style=\"float:right;width:400px;margin-bottom: 10px;\" />\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Photo by Andrea Piacquadio from Pexels</figcaption>\n</figure>\n\nMy last tip for you and, possibly the most important, is to advertise your work. A variety of options for advertising your work exist. Tailor the way you do this to your company culture and your personal style.\n\nIf you have a daily scrum or a weekly status meeting, show up ready to talk about what you've accomplished since the last meeting.\n\nWhen you meet someone new, be ready with your elevator pitch. Practice your pitch, so you'll be comfortable and confident when the time comes.\n\nCapture any compliments you receive and make sure your management team sees them. For example, if someone tweets that they found this article really helpful 😉, I'll retrieve the link to the tweet and forward it to my manager. If someone gives me a compliment verbally, I ask them to send me an email with the compliment so I can forward it to my manager.\n\nI also have a document where I keep a running list of every compliment I receive. When it's time for me to write my performance review, I organize the compliments and paste them directly into my review. This provides my management team with tangible evidence that I'm doing my job well.\n\nIf possible, find a manager who is good at advertising your work as well. I've been very fortunate that my director (my manager's manager) acts as a sponsor for me. He speaks well of me when I'm not in the room. If I send him a really good compliment, he forwards it on to his manager. This means that the executive team isn't only hearing about me at performance review time—they're hearing positive things about me throughout the year.\n\n###\n## <a name=\"plan-raise-profile\"></a>How can you make a plan to raise your profile?\n\nI hope this article has encouraged you to raise your profile and provided you with practical steps you can take. But I don't want it to stop there. I encourage you to make a plan.\n\nI've created a [How to Raise Your Profile Worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) you can use to make a plan and stick to it.\n\n<div align=\"center\">\n<a href=\"https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet\">\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_34_AM_fbf3fb1356.png\" alt=\"Screenshot of the first page of the How to Raise Your Profile Worksheet\" height=\"470\" />\n<img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_49_AM_f1ec211446.png\" alt=\"Screenshot of the second page of the How to Raise Your Profile Worksheet\" height=\"470\" />\n</a>\n</div> \n\nThe first page of the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) helps you identify what your profile is and how you want it to evolve. The second page of the worksheet asks you to select what actions you can take this week, this month, and this year to raise your profile. It also asks you to describe how you will evaluate if those actions are successful and how you will hold yourself accountable.\n\nI encourage you to print out the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) and spend some time making a plan that works for you. Talk about your plan with a friend or mentor. Regularly revisit your plan to track your progress and see what actions you can take next.\n\n## Summary\n\nRaising your profile internally at your company and externally in the broader developer community is an important part of growing your career as a developer. A variety of ways exist to let people know who you are and what you can do. [Make a plan to raise your profile](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) little by little over time.\n\nI can't wait to hear about you in the coming weeks and months!",
    //body: "Welcome (or welcome back!) to the SQL to MongoDB series. In the first post in this series, I [mapped terms and concepts from SQL to MongoDB](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb).\n\nI also introduced you to Ron. Let's take a moment and return to Ron. Ron is pretty set in his ways. For example, he loves his typewriter. It doesn't matter that computers are a bajillion times more powerful than typewriters. Until someone convinces him otherwise, he's sticking with his typewriter.\n\n<figure align=\"center\">\n    <img\n        style=\"border-radius: 10px\"\n        src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/typewriter.gif\"\n        alt=\"Ron sits at his typewriter and says 'I'm gonna type every word I know'\"\n    />\n</figure>\n\nMaybe you don't have a love for typewriters. But perhaps you have a love for SQL databases. You've been using them for years, you've learned how to make them work well enough for you, and you know that learning MongoDB will require you to change your mindset. Is it really worth the effort?\n\nYes!\n\nIn this post, we'll examine the top four reasons why you should use MongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\n> This article is based on a presentation I gave at MongoDB World and MongoDB.local Houston entitled \"From SQL to NoSQL: Changing Your Mindset.\"\n> \n> If you prefer videos over articles, check out the [recording](https://youtu.be/FFj04Apz_BE). Slides are available [here](https://www.slideshare.net/LaurenHaywardSchaefe/jumpstart-from-sql-to-nosql-changing-your-mindset).\n\n## Scale Cheaper\n\nYou can scale cheaper with MongoDB. Why?\n\nLet's begin by talking about scaling SQL databases. Typically, SQL databases scale vertically-when a database becomes too big for its server, it is migrated to a larger server.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/verticalscaling.gif\" class=\"align-center\" alt=\"Vertical scaling by migrating to larger servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Vertical scaling by migrating to larger servers</figcaption></figure>\n\nA few key problems arise with vertical scaling:\n\n* Large servers tend to be more expensive than two smaller servers with the same total capacity.\n* Large servers may not be available due to cost limitations, cloud provider limitations, or technology limitations (a server the size you need may not exist).\n* Migrating to a larger server may require application downtime.\n\nWhen you use MongoDB, you have the flexibility to scale horizontally through [sharding](https://docs.mongodb.com/manual/sharding/). Sharding is a method for distributing data across multiple servers. When your database exceeds the capacity of its current server, you can begin sharding and split it over two servers. As your database continues to grow, you can continue to add more servers. The advantage is that these new servers don't need to be big, expensive machines-they can be cheaper, commodity hardware. Plus, no downtime is required.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/horizontalscaling.gif\" class=\"align-center\" alt=\"Horizonal scaling by adding more commodity servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Horizonal scaling by adding more commodity servers</figcaption></figure>\n\n## Query Faster\n\nYour queries will typically be faster with MongoDB. Let's examine why.\n\n[Even in our simple example in the previous post](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#example-documents) where we modeled Leslie's data in SQL, we saw that her information was spread across three tables. Whenever we want to query for Leslie's information, we'll need to join three tables together.\n\nIn these three small tables, the join will be very fast. However, as the tables grow and our queries become more complex, joining tables together becomes very expensive.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/db_joins.png\" class=\"align-center\" alt=\"Representation of joining tables in a SQL database\">\n\nRecall our rule of thumb when modeling data in MongoDB: *data that is accessed together should be stored together*. When you follow this rule of thumb, most queries will not require you to join any data together.\n\nContinuing with our earlier example, if we want to retrieve Leslie's information from MongoDB, we can simply query for a single document in the `Users` collection. As a result, our query will be very fast.\n\nAs our documents and collections grow larger, we don't have to worry about our queries slowing down as long as we are using indexes and continue following our rule of thumb: *data that is accessed together should be stored together*.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/dbnojoins.png\" class=\"align-center\" alt=\"Representation of a MongoDB query with no joins\">\n\n## Pivot Easier\n\nRequirements change. Sometimes the changes are simple and require only a\nfew tweaks to the user interface. But sometimes changes go all the way\ndown to the database.\n\nIn the previous post in this series, we discovered—after implementing\nour application—that we needed to [store information about Lauren's school](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#std-label-sql-mdb-1-store-laurens-info).\nLet's take a look at this example a little more closely.\n\nTo add a new `school` column in our SQL database, we're going to have to\nalter the `Users` table. Executing the `Alter Table` command could take\na couple of hours depending on how much data is in the table. The\nperformance of our application could be decreased while the table is\nbeing altered, and we may need to schedule downtime for our application.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_parksandrec.png\" class=\"align-center\" alt=\"Alter Table command\">\n\nNow let's examine how we can do something similar in MongoDB. When our\nrequirements change and we need to begin storing the name of a user's\nschool in a `User` document, we can simply begin doing so. We can choose\nif and when to update existing documents in the collection.\n\nIf we had implemented schema validation, we would have the option of\napplying the validation to all inserts and updates or only to inserts\nand updates to documents that already meet the schema requirements. We\nwould also have the choice of throwing an error or a warning if a\nvalidation rule is violated.\n\nWith MongoDB, you can easily change the shape of your data as your app\nevolves.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_mongo.png\" class=\"align-center\" alt=\"Change the shape of your data in MongoDB without executing an Alter Table command\">\n\n## Program Faster\n\nTo be honest with you, this advantage is one of the biggest surprises to\nme. I figured that it didn't matter what you used as your backend\ndatabase—the code that interacts with it would be basically the same. I\nwas wrong.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/bensurprise.gif\" class=\"align-center\" alt=\"MFW I realized how much easier it is to code with MongoDB.\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">MFW I realized how much easier it is to code with MongoDB.</figcaption></figure>\n\nMongoDB documents map to data structures in most popular programming languages. This sounds like such a simple thing, but it makes a *humongous* difference when you're writing code.\n\nA friend encouraged me to test this out, so I did. I implemented the code to retrieve and update user profile information. My code has some simplifications in it to enable me to focus on the interactions with the database rather than the user interface. I also limited the user profile information to just contact information and hobbies.\n\nBelow is a comparison of my implementation using [MySQL](https://www.mysql.com) and MongoDB.\n\nI wrote the code in Python, but, don't worry if you're not familiar with Python, I'll walk you through it step by step. The concepts will be applicable no matter what your programming language of choice is.\n\n### Connect to the Databases\n\nLet's begin with the typical top-of-the-file stuff. We'll import what we need, connect to the database, and declare our variables. I'm going to simplify things by hardcoding the User ID of the user whose profile we will be retrieving rather than pulling it dynamically from the frontend code.\n\nMySQL\n\n``` python\nimport mysql.connector\n\n# CONNECT TO THE DB\nmydb = mysql.connector.connect(\n   host=\"localhost\",\n   user=\"root\",\n   passwd=\"rootroot\",\n   database=\"CityHall\"\n)\nmycursor = mydb.cursor(dictionary=True)\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nWe'll pass the [dictionary=True](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursordict.html) option when we create the cursor so that each row will be returned as a dictionary.\n\nMongoDB\n\n``` python\nimport pymongo\nfrom pymongo import MongoClient\n\n# CONNECT TO THE DB\nclient = MongoClient()\nclient = pymongo.MongoClient(\"mongodb+srv://root:rootroot@mycluster.mongodb.net/test?retryWrites=true&w=majority\")\ndb = client.CityHall\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nSo far, the code is pretty much the same.\n\n### Get the User's Profile Information\n\nNow that we have our database connections ready, let's use them to retrieve our user profile information. We'll store the profile information in a [Python Dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries). Dictionaries are a common data structure in Python and provide an easy way to work with your data.\n\nLet's begin by implementing the code for MySQL.\n\nSince the user profile information is spread across the `Users` table and the `Hobbies` table, we'll need to join them in our query. We can use [prepared statements](https://en.wikipedia.org/wiki/Prepared_statement) to ensure our data stays safe.\n\nMySQL\n\n``` python\nsql = \"SELECT * FROM Users LEFT JOIN Hobbies ON Users.ID = Hobbies.user_id WHERE Users.id=%s\"\nvalues = (userId,)\nmy cursor.execute(sql, values)\nuser = mycursor.fetchone()\n```\n\nWhen we execute the query, a result is returned for every user/hobby combination. When we call `fetchone()`, we get a dictionary like the following:\n\n``` python\n{u'city': u'Pawnee', u'first_name': u'Leslie', u'last_name': u'Yepp', u'user_id': 1, u'school': None, u'longitude': -86.5366, u'cell': u'8125552344', u'latitude': 39.1703, u'hobby': u'scrapbooking', u'ID': 10}\n```\n\nBecause we joined the `Users` and the `Hobbies` tables, we have a result for each hobby this user has. To retrieve all of the hobbies, we need to iterate the cursor. We'll append each hobby to a new `hobbies` array and then add the `hobbies` array to our `user` dictionary.\n\nMySQL\n\n``` python\nhobbies = []\nif (user[\"hobby\"]):\n  hobbies.append(user[\"hobby\"])\ndel user[\"hobby\"]\ndel user[\"ID\"]\nfor result in mycursor:\n  hobbies.append(result[\"hobby\"])\nuser[\"hobbies\"] = hobbies\n```\n\nNow let's implement that same functionality for MongoDB.\n\nSince we stored all of the user profile information in the `User` document, we don't need to do any joins. We can simply retrieve a single document in our collection.\n\nHere is where the big advantage that *MongoDB documents map to data structures in most popular programming languages* comes in. I don't have to do any work to get my data into an easy-to-work-with Python Dictionary. MongoDB gives me all of the results in a Python Dictionary automatically.\n\nMongoDB\n\n``` python\nuser = db['Users'].find_one({\"_id\": userId})\n```\n\nAnd that's it—we're done. What took us 12 lines for MySQL, we were able to implement in 1 line for MongoDB.\n\nOur `user` dictionaries are now pretty similar in both pieces of code.\n\nMySQL\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'school': None, \n   'cell': '8125552344', \n   'latitude': 39.1703,\n   'longitude': -86.5366,3\n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   'user_id': 1\n}\n```\n\nMongoDB\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'cell': '8125552344', \n   'location': [-86.536632, 39.170344], \n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   '_id': 1\n}\n```\n\nNow that we have retrieved the user's profile information, we'd likely send that information up the stack to the frontend UI code.\n\n### Update the User's Profile Information\n\nWhen Leslie views her profile information in our application, she may discover she needs to update her profile information. The frontend UI code would send that updated information in a Python dictionary to the Python files we've been writing.\n\nTo simulate Leslie updating her profile information, we'll manually update the Python dictionary ourselves for both MySQL and MongoDB.\n\nMySQL\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"latitude\": 38.897760,\n   \"longitude\": -77.036809,\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nMongoDB\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"location\": [-77.036809, 38.897760],\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nNow that our `user` dictionary is updated, let's push the updated information to our databases.\n\nLet's begin with MySQL. First, we need to update the information that is stored in the `Users` table.\n\nMySQL\n\n``` python\nsql = \"UPDATE Users SET first_name=%s, last_name=%s, cell=%s, city=%s, latitude=%s, longitude=%s, school=%s WHERE (ID=%s)\"\nvalues = (user[\"first_name\"], user[\"last_name\"], user[\"cell\"], user[\"city\"], user[\"latitude\"], user[\"longitude\"], user[\"school\"], userId)\nmycursor.execute(sql, values)\nmydb.commit()\n```\n\nSecond, we need to update our hobbies. For simplicity, we'll delete any existing hobbies in the `Hobbies` table for this user and then we'll insert the new hobbies into the `Hobbies` table.\n\nMySQL\n\n``` python\nsql = \"DELETE FROM Hobbies WHERE user_id=%s\"\nvalues = (userId,)\nmycursor.execute(sql, values)\nmydb.commit()\n\nif(len(user[\"hobbies\"]) > 0):\n   sql = \"INSERT INTO Hobbies (user_id, hobby) VALUES (%s, %s)\"\n   values = []\n   for hobby in user[\"hobbies\"]:\n      values.append((userId, hobby))\n   mycursor.executemany(sql,values)\n   mydb.commit()\n```\n\nNow let's update the user profile information in MongoDB. Since the user's profile information is stored in a single document, we only have to do a single update. Once again we will benefit from MongoDB documents mapping to data structures in most popular programming languages. We can send our `user` Python dictionary when we call `update_one()`, which significantly simplifies our code.\n\nMongoDB\n\n``` python\nresult = db['Users'].update_one({\"_id\": userId}, {\"$set\": user})\n```\n\nWhat took us 15 lines for MySQL, we were able to implement in 1 line for\nMongoDB.\n\n### Summary of Programming Faster\n\nIn this example, we wrote 27 lines of code to interact with our data in\nMySQL and 2 lines of code to interact with our data in MongoDB. While\nfewer lines of code is not always indicative of better code, in this\ncase, we can probably agree that fewer lines of code will likely lead to\neasier maintenance and fewer bugs.\n\nThe examples above were relatively simple with small queries. Imagine\nhow much bigger the difference would be for larger, more complex\nqueries.\n\nMongoDB documents mapping to data structures in most popular programming\nlanguages can be a huge advantage in terms of time to write, debug, and\nmaintain code.\n\nThe code above was written in Python and leveraged the Python MongoDB\nDriver. For a complete list of all of the programming languages that\nhave MongoDB drivers, visit the [MongoDB Manual](https://docs.mongodb.com/ecosystem/drivers/#drivers).\n\nIf you'd like to grab a copy of the code in the examples above, visit my\n[GitHub repo](https://github.com/mongodb-developer/SQL-to-NoSQL-Examples).\n<br>\n## Wrap Up\n\nIn this post, we discussed the top four reasons why you should use\nMongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\nBe on the lookout for the final post in this series where I'll discuss\nthe top three things you need to know as you move from SQL to MongoDB.\n",
    //body: "## First heading\n\nSome content goes here\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid=\"Javascript\"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid=\"Python\"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n<img alt=\"tiger image\" src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF\" />\n\n\n<figure align=\"center\">\n<img alt=\"Data Access Triangle with shared data, duplicated data and isolated data.\" src=\"https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png\" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n### Fourth heading\n\n<div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div>\n\n| Heading 1 | Heading 2 |\n| :-------: | :--------- |\n| `Some code` | <div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div>|\n| <img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG\" width=\"100px\"> | **Bold text** |\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I've got you covered.\n>\n>\n\n:youtube[]{vid=8CZs-0it9r4 start=720}\n\n"
    //body: "## First heading\n\nSome content goes here\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid=\"Javascript\"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid=\"Python\"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n<img alt=\"tiger image\" src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF\" />\n\n\n<figure align=\"center\">\n<img alt=\"Data Access Triangle with shared data, duplicated data and isolated data.\" src=\"https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png\" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\n### Fourth heading\n\n<div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div>\n\n| Heading 1 | Heading 2 |\n| :-------: | :--------- |\n| `Some code` | <div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div>|\n| <img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG\" width=\"100px\"> | **Bold text** |\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I've got you covered.\n>\n>\n\n:youtube[]{vid=8CZs-0it9r4 start=720}\n\n"
    // body: "## First heading\n\nSome content goes hereghegbg;ngf\n\n\n\n<br />\ndsndvbdsf\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid=\"Javascript\"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid=\"Python\"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n\n<figure align=\"center\">\n<img alt=\"Data Access Triangle with shared data, duplicated data and isolated data.\" src=\"https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png\" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\n### Fourth heading\n\n\n| Header 1 | Header 2 |\n| --- | --- |\n| <div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div> |  <img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG\" width=\"100px\">\n\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I've got you covered.\n>\n>\n:youtube[]{vid=8CZs-0it9r4 start=720}"
    // body:"## First heading\n\nSome content goes hereghegbg;ngf\n\n\n\n<br />\ndsndvbdsf\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid=\"Javascript\"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid=\"Python\"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\nApp Requirements | $regex | $text | $search | Reasoning |\n| --- | :---: | :---: | :---: | --- |\n| <div style=\"width: 250px\">The datastore must respect write concerns</div> | <div style=\"width: 70px\">✅</div> | <div style=\"width: 70px\">🚫</div> | <div style=\"width: 70px\">🚫</div> | If you have a datastore that must respect write concerns for use cases like transactions with heavy reads after writes, [$regex](https://docs.mongodb.com/manual/reference/operator/query/regex/) is a better choice. For search use cases, reads after writes should be rare. |\n| Language awareness (Spanish, Chinese, English, etc.) | 🚫 | 🚫 | ✅ | Atlas Search natively supports over [40 languages](https://docs.atlas.mongodb.com/atlas-search/analyzers/language/) so that you can better tokenize languages, remove stopwords, and interpret diacritics to support improved search relevance.  |\n| Case-insensitive text search |🚫  | 🚫 |✅  | Case-insensitive text search using $regex is one of the biggest sources of problems among our customer base, and [$search](https://docs.atlas.mongodb.com/atlas-search/) offers far more capabilities than $text. |\n| Highlighting result text | 🚫 |🚫  | ✅ | The ability to [highlight](https://docs.atlas.mongodb.com/atlas-search/highlighting/) text fragments in result documents helps end users contextualize why some documents are returned compared to others. It's essential for user experiences powered by natural language queries. While developers could implement a crude version of highlighting with the other options, the $search aggregation stage provides an easy-to-consume API and a core engine that handles topics like tokenization and offsets. |\n| Geospatial-aware search queries | ✅ | 🚫 | ✅ | Both $regex and [$search](https://www.mongodb.com/developer/how-to/searching-on-your-location-atlas-search-geospatial-operators/) have geospatial capabilities. The differences between the two lie in the differences between how $regex and $search treat geospatial parameters. For instance, Lucene draws a straight line from one query coordinate to another, whereas MongoDB lines are spherical. Spherical queries are best for flights, whereas flat map queries might be better for short distances. |\n| On-premises or local deployment | ✅ | ✅ | 🚫 | Atlas Search is not available on-premise or for local deployment. The single deployment target enables our team to move fast and innovate at a more rapid pace than if we targeted many deployment models. For that reason, $regex and $text are the only options for people who do not have access to Atlas.  |\n| Autocomplete of characters (nGrams) | 🚫 | 🚫 | ✅ | End users typing in a search box have grown accustomed to an experience where their search queries are completed for them. Atlas Search offers [edgeGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#edgegram) for left-to-right autocomplete, [nGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#std-label-ngram-tokenizer-ref) for autocomplete with languages that do not have whitespace, and rightEdgeGram for languages that are written and read right-to-left. |\n| Autocomplete of words (wordGrams) | 🚫 | 🚫 | ✅ | If you have a field with more than two words and want to offer word-based autocomplete as a feature of your application, then a [shingle token filter](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#shingle) with custom analyzers could be best for you. Custom analyzers offer developers a flexible way to index and modify how their data is stored. |\n| Fuzzy matching on text input | 🚫 | 🚫 |✅  | If you would like to filter on user generated input, Atlas Search’s fuzzy offers flexibility.  Issues like misspelled words are handled best by $search. |\n| Filtering based on more than 10 strings | 🚫 | 🚫 | ✅ | It’s tricky to filter on more than 10 strings in MongoDB due to the limitations of compound text indexes. The [compound filter](https://docs.atlas.mongodb.com/atlas-search/compound/#mongodb-data-filter) is again the right way to go here. |\n| Relevance score sorted search | 🚫 |🚫  |✅  |Atlas Search uses the state-of-art [BM25 algorithm](https://en.wikipedia.org/wiki/Okapi_BM25) for determining the search relevance score of documents and allows for advanced configuration through [boost expressions](https://docs.atlas.mongodb.com/atlas-search/scoring/#expressions) like multiply and gaussian decay, as well as analyzers, search operators, and synonyms.   |\n| Cluster needs to be optimized for write performance |🚫  | 🚫 |✅  | When you add a database index in MongoDB, you should consider tradeoffs to write performance in cases where database write performance is important. Search Indexes don’t degrade cluster write performance.  |\n| Searching through large data sets | 🚫 |🚫  |✅  | If you have lots of documents, your queries will linearly get slower. In Atlas Search, the inverted index enables fast document retrieval at very large scales.  |\n| Partial indexes for simple text matching | ✅ |🚫  |🚫  | Atlas Search does not yet support partial indexing. Today, $regex takes the cake. |\n| Single compound index on arrays |🚫  | 🚫 |✅  | Atlas Search is partially designed for this use case, where term indexes are intersected in a single Search index, to eliminate the need for compound indexes for filtering on arrays. |\n| Synonyms search | 🚫 |🚫  |✅   | The only option for robust [synonyms](https://docs.atlas.mongodb.com/atlas-search/synonyms/) search is Atlas Search, where synonyms are defined in a collection, and that collection is referenced in your search index. |\n| Fast faceting for counts | 🚫 |🚫  |✅   | If you are looking for [faceted](https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/) navigation, or fast counts of documents based on text criteria, let Atlas Search do the bucketing. In our internal testing, [it's 100x faster](https://www.mongodb.com/blog/post/100x-faster-facets-counts-mongodb-atlas-search-public-preview) and also supports number and date buckets. |\n| Custom analyzers (stopwords, email/URL token, etc.) | 🚫 | 🚫 | ✅  | Using Atlas Search, you can define a [custom analyzer](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#std-label-custom-analyzers) to suit your specific indexing needs. |\n| Partial match | 🚫 |🚫  |✅   |MongoDB has a number of partial match options ranging from the [wildcard operator](https://docs.atlas.mongodb.com/atlas-search/wildcard/) to [autocomplete](https://docs.atlas.mongodb.com/atlas-search/autocomplete/), which can be useful for some partial match use cases.  |\n| Phrase queries | 🚫 | 🚫 | ✅  | Phrase queries are supported natively in Atlas Search via the [phrase operator](https://docs.atlas.mongodb.com/atlas-search/phrase/). |\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n\n<figure align=\"center\">\n<img alt=\"Data Access Triangle with shared data, duplicated data and isolated data.\" src=\"https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png\" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\n### Fourth heading\n\n\n| Header 1 | Header 2 |\n| --- | --- |\n| <div style=\"width: 400px;\">:youtube[]{vid=iz37fDe1XoM} </div> |  <img src=\"https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG\" width=\"100px\">\n\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I've got you covered.\n>\n>\n:youtube[]{vid=8CZs-0it9r4 start=720}"
    body: '## First heading\n\nSome content goes hereghegbg;ngf\n\n\n\n<br />\ndsndvbdsf\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid="Javascript"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid="Python"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\nApp Requirements | $regex | $text | $search | Reasoning |\n| --- | :---: | :---: | :---: | --- |\n| The datastore must respect write concerns | ✅ | 🚫 | 🚫 | If you have a datastore that must respect write concerns for use cases like transactions with heavy reads after writes, [$regex](https://docs.mongodb.com/manual/reference/operator/query/regex/) is a better choice. For search use cases, reads after writes should be rare. |\n| Language awareness (Spanish, Chinese, English, etc.) | 🚫 | 🚫 | ✅ | Atlas Search natively supports over [40 languages](https://docs.atlas.mongodb.com/atlas-search/analyzers/language/) so that you can better tokenize languages, remove stopwords, and interpret diacritics to support improved search relevance.  |\n| Case-insensitive text search |🚫  | 🚫 |✅  | Case-insensitive text search using $regex is one of the biggest sources of problems among our customer base, and [$search](https://docs.atlas.mongodb.com/atlas-search/) offers far more capabilities than $text. |\n| Highlighting result text | 🚫 |🚫  | ✅ | The ability to [highlight](https://docs.atlas.mongodb.com/atlas-search/highlighting/) text fragments in result documents helps end users contextualize why some documents are returned compared to others. It\'s essential for user experiences powered by natural language queries. While developers could implement a crude version of highlighting with the other options, the $search aggregation stage provides an easy-to-consume API and a core engine that handles topics like tokenization and offsets. |\n| Geospatial-aware search queries | ✅ | 🚫 | ✅ | Both $regex and [$search](https://www.mongodb.com/developer/how-to/searching-on-your-location-atlas-search-geospatial-operators/) have geospatial capabilities. The differences between the two lie in the differences between how $regex and $search treat geospatial parameters. For instance, Lucene draws a straight line from one query coordinate to another, whereas MongoDB lines are spherical. Spherical queries are best for flights, whereas flat map queries might be better for short distances. |\n| On-premises or local deployment | ✅ | ✅ | 🚫 | Atlas Search is not available on-premise or for local deployment. The single deployment target enables our team to move fast and innovate at a more rapid pace than if we targeted many deployment models. For that reason, $regex and $text are the only options for people who do not have access to Atlas.  |\n| Autocomplete of characters (nGrams) | 🚫 | 🚫 | ✅ | End users typing in a search box have grown accustomed to an experience where their search queries are completed for them. Atlas Search offers [edgeGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#edgegram) for left-to-right autocomplete, [nGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#std-label-ngram-tokenizer-ref) for autocomplete with languages that do not have whitespace, and rightEdgeGram for languages that are written and read right-to-left. |\n| Autocomplete of words (wordGrams) | 🚫 | 🚫 | ✅ | If you have a field with more than two words and want to offer word-based autocomplete as a feature of your application, then a [shingle token filter](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#shingle) with custom analyzers could be best for you. Custom analyzers offer developers a flexible way to index and modify how their data is stored. |\n| Fuzzy matching on text input | 🚫 | 🚫 |✅  | If you would like to filter on user generated input, Atlas Search’s fuzzy offers flexibility.  Issues like misspelled words are handled best by $search. |\n| Filtering based on more than 10 strings | 🚫 | 🚫 | ✅ | It’s tricky to filter on more than 10 strings in MongoDB due to the limitations of compound text indexes. The [compound filter](https://docs.atlas.mongodb.com/atlas-search/compound/#mongodb-data-filter) is again the right way to go here. |\n| Relevance score sorted search | 🚫 |🚫  |✅  |Atlas Search uses the state-of-art [BM25 algorithm](https://en.wikipedia.org/wiki/Okapi_BM25) for determining the search relevance score of documents and allows for advanced configuration through [boost expressions](https://docs.atlas.mongodb.com/atlas-search/scoring/#expressions) like multiply and gaussian decay, as well as analyzers, search operators, and synonyms.   |\n| Cluster needs to be optimized for write performance |🚫  | 🚫 |✅  | When you add a database index in MongoDB, you should consider tradeoffs to write performance in cases where database write performance is important. Search Indexes don’t degrade cluster write performance.  |\n| Searching through large data sets | 🚫 |🚫  |✅  | If you have lots of documents, your queries will linearly get slower. In Atlas Search, the inverted index enables fast document retrieval at very large scales.  |\n| Partial indexes for simple text matching | ✅ |🚫  |🚫  | Atlas Search does not yet support partial indexing. Today, $regex takes the cake. |\n| Single compound index on arrays |🚫  | 🚫 |✅  | Atlas Search is partially designed for this use case, where term indexes are intersected in a single Search index, to eliminate the need for compound indexes for filtering on arrays. |\n| Synonyms search | 🚫 |🚫  |✅   | The only option for robust [synonyms](https://docs.atlas.mongodb.com/atlas-search/synonyms/) search is Atlas Search, where synonyms are defined in a collection, and that collection is referenced in your search index. |\n| Fast faceting for counts | 🚫 |🚫  |✅   | If you are looking for [faceted](https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/) navigation, or fast counts of documents based on text criteria, let Atlas Search do the bucketing. In our internal testing, [it\'s 100x faster](https://www.mongodb.com/blog/post/100x-faster-facets-counts-mongodb-atlas-search-public-preview) and also supports number and date buckets. |\n| Custom analyzers (stopwords, email/URL token, etc.) | 🚫 | 🚫 | ✅  | Using Atlas Search, you can define a [custom analyzer](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#std-label-custom-analyzers) to suit your specific indexing needs. |\n| Partial match | 🚫 |🚫  |✅   |MongoDB has a number of partial match options ranging from the [wildcard operator](https://docs.atlas.mongodb.com/atlas-search/wildcard/) to [autocomplete](https://docs.atlas.mongodb.com/atlas-search/autocomplete/), which can be useful for some partial match use cases.  |\n| Phrase queries | 🚫 | 🚫 | ✅  | Phrase queries are supported natively in Atlas Search via the [phrase operator](https://docs.atlas.mongodb.com/atlas-search/phrase/). |\n\nApp Requirements | $regex | $text | $search | Reasoning |\n| --- | :---: | :---: | :---: | --- |\n| <div style="width: 250px">The datastore must respect write concerns</div> | <div style="width: 70px">✅</div> | <div style="width: 70px">🚫</div> | <div style="width: 70px">🚫</div> | If you have a datastore that must respect write concerns for use cases like transactions with heavy reads after writes, [$regex](https://docs.mongodb.com/manual/reference/operator/query/regex/) is a better choice. For search use cases, reads after writes should be rare. |\n| Language awareness (Spanish, Chinese, English, etc.) | 🚫 | 🚫 | ✅ | Atlas Search natively supports over [40 languages](https://docs.atlas.mongodb.com/atlas-search/analyzers/language/) so that you can better tokenize languages, remove stopwords, and interpret diacritics to support improved search relevance.  |\n| Case-insensitive text search |🚫  | 🚫 |✅  | Case-insensitive text search using $regex is one of the biggest sources of problems among our customer base, and [$search](https://docs.atlas.mongodb.com/atlas-search/) offers far more capabilities than $text. |\n| Highlighting result text | 🚫 |🚫  | ✅ | The ability to [highlight](https://docs.atlas.mongodb.com/atlas-search/highlighting/) text fragments in result documents helps end users contextualize why some documents are returned compared to others. It\'s essential for user experiences powered by natural language queries. While developers could implement a crude version of highlighting with the other options, the $search aggregation stage provides an easy-to-consume API and a core engine that handles topics like tokenization and offsets. |\n| Geospatial-aware search queries | ✅ | 🚫 | ✅ | Both $regex and [$search](https://www.mongodb.com/developer/how-to/searching-on-your-location-atlas-search-geospatial-operators/) have geospatial capabilities. The differences between the two lie in the differences between how $regex and $search treat geospatial parameters. For instance, Lucene draws a straight line from one query coordinate to another, whereas MongoDB lines are spherical. Spherical queries are best for flights, whereas flat map queries might be better for short distances. |\n| On-premises or local deployment | ✅ | ✅ | 🚫 | Atlas Search is not available on-premise or for local deployment. The single deployment target enables our team to move fast and innovate at a more rapid pace than if we targeted many deployment models. For that reason, $regex and $text are the only options for people who do not have access to Atlas.  |\n| Autocomplete of characters (nGrams) | 🚫 | 🚫 | ✅ | End users typing in a search box have grown accustomed to an experience where their search queries are completed for them. Atlas Search offers [edgeGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#edgegram) for left-to-right autocomplete, [nGrams](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/#std-label-ngram-tokenizer-ref) for autocomplete with languages that do not have whitespace, and rightEdgeGram for languages that are written and read right-to-left. |\n| Autocomplete of words (wordGrams) | 🚫 | 🚫 | ✅ | If you have a field with more than two words and want to offer word-based autocomplete as a feature of your application, then a [shingle token filter](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#shingle) with custom analyzers could be best for you. Custom analyzers offer developers a flexible way to index and modify how their data is stored. |\n| Fuzzy matching on text input | 🚫 | 🚫 |✅  | If you would like to filter on user generated input, Atlas Search’s fuzzy offers flexibility.  Issues like misspelled words are handled best by $search. |\n| Filtering based on more than 10 strings | 🚫 | 🚫 | ✅ | It’s tricky to filter on more than 10 strings in MongoDB due to the limitations of compound text indexes. The [compound filter](https://docs.atlas.mongodb.com/atlas-search/compound/#mongodb-data-filter) is again the right way to go here. |\n| Relevance score sorted search | 🚫 |🚫  |✅  |Atlas Search uses the state-of-art [BM25 algorithm](https://en.wikipedia.org/wiki/Okapi_BM25) for determining the search relevance score of documents and allows for advanced configuration through [boost expressions](https://docs.atlas.mongodb.com/atlas-search/scoring/#expressions) like multiply and gaussian decay, as well as analyzers, search operators, and synonyms.   |\n| Cluster needs to be optimized for write performance |🚫  | 🚫 |✅  | When you add a database index in MongoDB, you should consider tradeoffs to write performance in cases where database write performance is important. Search Indexes don’t degrade cluster write performance.  |\n| Searching through large data sets | 🚫 |🚫  |✅  | If you have lots of documents, your queries will linearly get slower. In Atlas Search, the inverted index enables fast document retrieval at very large scales.  |\n| Partial indexes for simple text matching | ✅ |🚫  |🚫  | Atlas Search does not yet support partial indexing. Today, $regex takes the cake. |\n| Single compound index on arrays |🚫  | 🚫 |✅  | Atlas Search is partially designed for this use case, where term indexes are intersected in a single Search index, to eliminate the need for compound indexes for filtering on arrays. |\n| Synonyms search | 🚫 |🚫  |✅   | The only option for robust [synonyms](https://docs.atlas.mongodb.com/atlas-search/synonyms/) search is Atlas Search, where synonyms are defined in a collection, and that collection is referenced in your search index. |\n| Fast faceting for counts | 🚫 |🚫  |✅   | If you are looking for [faceted](https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/) navigation, or fast counts of documents based on text criteria, let Atlas Search do the bucketing. In our internal testing, [it\'s 100x faster](https://www.mongodb.com/blog/post/100x-faster-facets-counts-mongodb-atlas-search-public-preview) and also supports number and date buckets. |\n| Custom analyzers (stopwords, email/URL token, etc.) | 🚫 | 🚫 | ✅  | Using Atlas Search, you can define a [custom analyzer](https://docs.atlas.mongodb.com/atlas-search/analyzers/custom/#std-label-custom-analyzers) to suit your specific indexing needs. |\n| Partial match | 🚫 |🚫  |✅   |MongoDB has a number of partial match options ranging from the [wildcard operator](https://docs.atlas.mongodb.com/atlas-search/wildcard/) to [autocomplete](https://docs.atlas.mongodb.com/atlas-search/autocomplete/), which can be useful for some partial match use cases.  |\n| Phrase queries | 🚫 | 🚫 | ✅  | Phrase queries are supported natively in Atlas Search via the [phrase operator](https://docs.atlas.mongodb.com/atlas-search/phrase/). |\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n\n<figure align="center">\n<img alt="Data Access Triangle with shared data, duplicated data and isolated data." src="https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\n### Fourth heading\n\n\n| Header 1 | Header 2 |\n| --- | --- |\n| <div style="width: 400px;">:youtube[]{vid=iz37fDe1XoM} </div> |  <img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG" width="100px">\n\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I\'ve got you covered.\n>\n>\n:youtube[]{vid=8CZs-0it9r4 start=720}',
};
