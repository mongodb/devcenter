import { MOCK_ARTICLE_TAGS } from './mock-tags';
import { ContentItem } from '../interfaces/content-item';

interface L1Content {
    content: ContentItem[];
    featured: ContentItem[];
}
const getL1Content = (slug: string = 'all'): L1Content => {
    const featured: ContentItem[] = [
        {
            authors: [],
            category: 'Article',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is 101 article',
            description:
                'Last summer, I was bugging my boss [Joe Drumgoole](https://twitter.com/jdrumgoole) for a promotion. I asked him what I needed to do in order to get promoted. He explained that I was doing great work, but I needed to raise my profile internally at the company. He said that my MongoDB colleagues needed to know my name and my work.\n\nThis advice felt exceptionally challenging as we were in the middle of the pandemic, and I had no hope of seeing my colleagues in person and striking up an impromptu conversation. I realized I was going to have to work strategically to raise my profile.\n\nI sought the advice of [Ken Alger](https://www.linkedin.com/in/kenwalger/) who provided me with several suggestions on how to raise my profile. I disliked his advice as it was going to push me out of my comfort zone, but I decided to try it anyway.\n\nKen\'s advice worked. I raised my profile and was rewarded with a promotion.\n\n![A comic book style animation of a conversation between Lauren, Joe, and Ken about getting a promotion](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Raise_Your_Profile_e40bad22ef.gif "An overly dramatic recreation of conversations I\'ve had with Joe and Ken")\n\nThis concept of raising my profile has been a common thread throughout my career. When I was a full-time software engineer, my managers talked with me about expanding my scope and demonstrating influence.\n\nPerhaps you\'ve received similar feedback—you need to raise your profile, expand your scope, or demonstrate influence. Or perhaps you\'re doing amazing work and you\'ve been trying to figure out what you need to do in order to get your next promotion.\n\nIn this article, I\'ll answer the following questions:\n\n* [What is your profile?](#what-is-profile)\n* [What does it mean to raise your profile?](#what-raise-profile)\n* [Why should you bother raising your profile?](#why-raise-profile)\n* [What steps can you take to raise your profile?](#steps-raise-profile)\n* [How can you make a plan to raise your profile?](#plan-raise-profile)\n\n> [Luce Carter](https://twitter.com/LuceCarter1) and I recently hosted a live stream on this topic. Check out the recording below: :youtube[]{vid=Z3tgvOZdinM}\n\n## <a name="what-is-profile"></a>What is your profile?\n\nBefore we dig into the "why" and "how," let\'s get on the same page about what your profile is. Your profile describes who you are, what you can do, and what you are known for. Let\'s discuss each piece.\n\n### Who you are\n\nThe first thing people need to know is who you are professionally: things like your name, your role or title, and your company. Internally at your company, people also need to know your location within the company: things like your team, department, organization, and/or manager.\n\nAs an example, here are some facts about who I am:\n\n* Name: Lauren Schaefer\n* Title: Staff Developer Advocate at MongoDB\n* Location in my company: DevRel Team under [Rita Rodrigues](https://twitter.com/RitaMRDevIT)\n\n### What you can do\n\nThe next part of your profile is what you can do. Consider both your technical skills as well as your soft skills.\n\nHere are some things I can do:\n\n* Build web apps in JavaScript and Node.js\n* Discuss MongoDB data modeling best practices\n* Build CI/CD pipelines\n* Keynote conferences\n* Provide team glue through activities like the MongoDB DevRel Book Club\n\n### What you are known for\n\nThe final piece of your profile is what you are known for both internally at your company and externally in the wider developer community. Include technical skills and soft skills (duplicating items from the previous section is totally fine), values, traits, and other things you do.\n\nBelow are some things I\'m known for:\n\n* Creating engaging and easy-to-understand content\n* Completing tasks and projects on time with excellence and minimal supervision\n* Being detail- and action-oriented\n* Advocating for remote work\n* Creating silly [TikToks](https://www.tiktok.com/@lauren_schaefer) about life as a developer\n\n## <a name="what-raise-profile"></a>What does it mean to raise your profile?\n\nNow that we\'re on the same page about what a profile is, let\'s talk about how to "raise" it. Raising your profile means increasing the number of people who know your profile.\n\n<div align="center">\n<figure>\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/raisetheroof_cd5ef2f997.gif" alt="Michael and Dwight raise the roof"/>\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Raising your profile is not the same as raising the roof</figcaption>\n</figure>\n</div>\n\nYou\'ll likely want to work to raise your profile internally at your company and externally in the broader developer community.\n\nWhen considering how to raise your profile internally, think about working your way from your immediate team all the way up to your executive team:\n\n* Team\n* Management\n* Department\n* Company\n* Executive team\n\nWhen considering how to raise your profile externally, you have a variety of options:\n\n* Former colleagues or classmates\n* Local developers\n* Global developer community (in person or online)\n\n## <a name="why-raise-profile"></a>Why should you bother raising your profile?\n\nRaising your profile might seem like a lot of work. If you\'re like me, you\'d probably rather put your head down and get stuff done instead of putting in the effort to let people know about you.\n\nSo why should you bother raising your profile? Let\'s discuss four major reasons.\n\n### Meet *explicit* promotion requirements\n\nRaising your profile is a fairly common theme to see in the promotion requirements for software engineers and developers. Some companies focus more on internal influence while others focus more on external influence. Either way, companies want to see that you have a growing reputation.\n\nLet\'s take a look at some engineering career frameworks, using examples I’ve borrowed from other companies:\n\n* [Patreon\'s Engineering Levels](https://levels.patreon.com/) outlines their expectations for IC1 (Individual Contributor 1) all the way up to IC6 (Individual Contributor 6). The document has several categories including influence. As they move higher up the individual contributor ladder, engineers are expected to broaden their influence throughout the company and eventually to the entire industry.\n* [The Medium Engineering Growth Rubric](https://docs.google.com/spreadsheets/d/1EO-Dbsayn8Nz9Ii3MKcwRbt-EIJ2MjQdpoyhh0tBdZk/edit#gid=1098466721) defines engineers\' growth progression throughout many categories. One of the categories they include is Evangelism. Their engineers progress from influencing "individuals" to "small events" to "large groups" to "the whole industry" to "a wider audience outside the industry."\n* [The Khan Academy Engineering Career Development](https://docs.google.com/document/d/1qr0d05X5-AsyDYqKRCfgGGcWSshTMd_vfTggfhDpbls/edit) document describes how their engineers grow in skills, scope, and experience throughout their careers. The document has a section specifically on "evangelism and public artifacts" with the goal of recruiting top engineers to the company. Khan Academy incentivizes their engineers to share their work with the broader community through activities like blogging, contributing to open source projects, giving tech talks, and participating in meetups and hackathons.\n\n### Meet *implicit* promotion requirements\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181421_c885c6e66a.jpg" alt="Group of peple having a meeting at a conference table filled with laptops and notepads" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nRaising your profile is commonly part of the *implicit* promotion requirements.\n\nEvery company handles promotions differently, but, in most cases, your manager will not be able to give you a promotion on their own. At the lower levels, your manager\'s manager and possibly your manager\'s peers will need to approve your promotion.\n\nAs you get into the higher levels, leaders across your organization and your company will need to agree to your promotion. The management team and executives need to know who you are and the work that you do in order to approve the promotion.\n\n### Take advantage of new opportunities\n\nAs you raise your profile, doors will begin to open for you. Some doors you\'ll strive to open yourself and others will unexpectedly swing open.\n\nBelow are examples of opportunities that may arise as you raise your profile:\n\n* A leadership opportunity\n* A new role at your company\n* A new job at another company\n* An invitation to speak at a conference, a live stream, or a podcast\n* An invitation to write a guest article or author a book\n* New connections with other industry leaders\n\n### Recruit other top developers to work with you\n\n<figure style="clear: both;float: left; margin-left: 0px; margin-bottom: 0px;padding-bottom: 0px;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_linda_ellershein_3127883_55a26ec2ee.jpg" alt="The words \'JOIN OUR TEAM\' spelled out with magnetic letters. Multi colored lollipops surround the words." style="float:left;width:200px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nDevelopers love to work with other amazing developers. As you and your teammates build your profiles, your company\'s reputation will begin to grow. Top developers will want to work with you.\n\nIf your company has referral bonuses, attracting top developers to work with you has a nice monetary perk. Either way, you\'ll get to work with other amazing developers.\n\n\n## <a name="steps-raise-profile" ></a> What steps can you take to raise your profile?\n\nNow that you know what it means to raise your profile and why you should put in the effort to do it, let\'s talk about how you can do it. In this section, I\'ll discuss 10 ways you can raise your profile.\n\n### 1\\. Become the go\\-to person\n\n![Picture of a woman coding with a Python book beside her](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181359_1_bc08a20e58.jpg "Photo by Christina Morillo from Pexels")\n\nBecome the go-to person for a particular language (e.g., Python), a technology (e.g., Kubernetes) or a common challenge that customers face (e.g., how to model data in MongoDB). Be that go-to person for your team or your entire company.\n\nAs an example, Dropbox specifically calls out "Domain Expertise" in their [career framework](https://dropbox.github.io/dbx-career-framework/what_is_impact.html). As their engineers grow their careers, they are expected to be the authority on a platform, a field, or a product category. Dropbox desires for their engineers to grow in depth or breadth.\n\n### 2\\. Contribute to open\\-source or public projects\n\nContributing to open-source or public projects is a great way for other developers to see your work. Being a contributor or a maintainer in a popular open-source project can give you a lot of visibility.\n\nIf, like me, you don\'t enjoy coding in your off-hours, see if there is a way you can code in the open at work. Your company may also see the value in contributing to open-source projects or developing in the open.\n\nYou may also want to create a readme for your GitHub profile page to let people know a little about you. [Joe Karlsson](https://my.link.gallery/joekarlsson) has a nice [60-second tutorial](https://www.tiktok.com/@joekarlsson/video/6943307561995193606) on how you can easily do this with just a markdown file.\n\n### 3\\. Be the news reporter for your team\n\nReporting the news for your team is an easy way to get your name out wider than your core development team. Below are some examples of how you can report the news.\n\n* **Report the news to a cross-functional team.** If someone on your team needs to be a representative as part of a larger cross-functional team, volunteer to be that person. You\'ll bring status updates, but you can also become known as the person who identifies or solves problems as the larger team works together. You can also become known as the expert on your part of the project.\n* **Report the news to the executives.** If someone needs to report status to the executives, volunteer. This is a great way to get to know the executive team as they\'ll see your face on a regular basis.\n* **Curate an internal or external newsletter.** If you\'re not a fan of extra meetings, you can volunteer to curate an internal or external newsletter that provides updates about your piece of the product or the product as a whole. As an example, [Adrienne Tacke](https://twitter.com/AdrienneTacke) posts a weekly newsletter on the [MongoDB Community](https://www.mongodb.com/community/forums/u/yo_adrienne/activity/topics) and [dev.to](https://dev.to/mongodb). The newsletter covers all the amazing things our Developer Advocacy team is doing.\n\nKeep in mind that, depending on your company culture, reporting the news can become seen as a task that has less value than other, more technical tasks. Be sure you tailor the role in a way that gives you a lot of visibility and provides value to others.\n\n### 4\\. Write blog posts or articles\n\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_pixabay_261662_2a2105e249.jpg" alt="Zoomed in picture of a person\'s hands on a laptop while they write on their blog" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Pixabay from Pexels</figcaption>\n</figure>\n\nIf you want to be seen as an expert on something, write about it.\n\nOthers may know more about a topic than you do, but don\'t let that stop you. If you\'re writing about something, people will assume you know what you\'re talking about.\n\nYou can write about things you already know or things you are learning. Writing about topics you don\'t already know is a great way to reinforce your learning.\n\nA multitude of options exist for where you can write:\n\n* Your company may have an engineering blog.\n* You can create your own personal blog.\n* You can use an existing blogging platform like dev.to or Medium that allows you to write without spinning up your own blog.\n\n### 5\\. Give tech talks\n\nGive a tech talk. You can give your talk at a small Lunch and Learn at your company or a huge international conference or anywhere in between. You can even give tech talks online by live streaming on Twitch or YouTube.\n\nWhether you\'re a seasoned expert or brand new to coding, you have a story to tell. You can talk about your favorite technology, best practices, or how you really messed something up (people love failure stories).\n\nMany people have a fear of public speaking. It\'s normal. Don\'t let that fear stop you. Start in small venues where you feel comfortable and take baby steps to other venues.\n\nFor tips on how to get started speaking at conferences, check out [this article](https://bcrecworks.medium.com/an-interview-with-lauren-schaefer-speaker-and-developer-advocate-at-mongodb-2f41ed9aedb5) where I was interviewed about how I got started with public speaking.\n\nIf you\'re interested in speaking about MongoDB at a conference, check out the [MongoDB Community Speakers Program](https://www.mongodb.com/developer/community/speaker-program/). You can apply to work with a speaking coach and get funding to attend a conference.\n\n### 6\\. Post on social media\n\n<figure style="clear: both;float: left; margin-left: 0px;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_tracy_le_blanc_607812_21e69e3608.jpg" alt="Zoomed in picture of a person\'s hand holding a phone that is displaying their social networking apps" style="float:left;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nMaybe you love it or maybe you hate it, but it\'s hard to deny that social media is a great way to raise your profile.\n\nYou can create bite-sized content on platforms like Twitter, LinkedIn, Instagram, and TikTok. Or you can create longer, more in depth content on Twitch, YouTube, or a podcast. Posting to all of those platforms might seem a bit daunting, but you can likely reuse or recycle the same content.\n\nYou may be surprised to learn that posting to social media not only helps you raise your profile externally, it can also help you raise your profile internally. Colleagues who you may not interact with regularly during work hours may see your posts on social media. This has certainly been the case for me as people across MongoDB have been amused with my TikToks that I\'ve posted on LinkedIn.\n\n### 7\\. Lead an employee networking group\n\nLeading an employee networking group is a great way to get connected with other people throughout your company and demonstrate leadership. Sometimes executives join these groups, providing you with an opportunity to get to know them in an informal setting.\n\nCompanies have different names for employee networking groups. I\'ve also heard them called affinity groups or business resource groups. These are groups at your company for a particular set of people with a common interest or demographic.\n\nI will add a caveat to this recommendation. Some companies really value the work people do in leading these networking groups. Other companies see these as nice-to-have groups that don\'t provide a lot of value to the business. Be sure you can frame your work in these groups in a way that matters to your management team.\n\n### 8\\. Attend\\, host\\, or speak at a meetup or hackathon\n\nMeetups and hackathons allow you to get connected with other people in your local community. You never know what opportunities will arise from these connections.\n\nHosting a meetup doesn\'t require any technical skills, but, if you execute the meetups consistently, people will see you as a leader in your local tech community. Attending and asking thoughtful questions will also aid in you being seen as a technical leader.\n\n### 9\\. Answer questions publicly online\n\nAnswering questions publicly online in forums provides value to others and increases your name recognition. Be sure your answers are kind, thoughtful, and accurate. As you begin to answer questions more regularly, your reputation will grow.\n\nIf you\'d like to give this a try, join the [MongoDB Community](http://community.mongodb.com/). You can share your tips, tricks, and best practices with others.\n\n![Screenshot of the front page of the MongoDB Community](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_12_18_58_PM_a092a9ab07.png "Join us in the MongoDB Community")\n\n### 10\\. Advertise your work\n\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_andrea_piacquadio_3761509_df6dee482b.jpg" alt="Picture of a woman happily shouting into a megaphone" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Andrea Piacquadio from Pexels</figcaption>\n</figure>\n\nMy last tip for you and, possibly the most important, is to advertise your work. A variety of options for advertising your work exist. Tailor the way you do this to your company culture and your personal style.\n\nIf you have a daily scrum or a weekly status meeting, show up ready to talk about what you\'ve accomplished since the last meeting.\n\nWhen you meet someone new, be ready with your elevator pitch. Practice your pitch, so you\'ll be comfortable and confident when the time comes.\n\nCapture any compliments you receive and make sure your management team sees them. For example, if someone tweets that they found this article really helpful 😉, I\'ll retrieve the link to the tweet and forward it to my manager. If someone gives me a compliment verbally, I ask them to send me an email with the compliment so I can forward it to my manager.\n\nI also have a document where I keep a running list of every compliment I receive. When it\'s time for me to write my performance review, I organize the compliments and paste them directly into my review. This provides my management team with tangible evidence that I\'m doing my job well.\n\nIf possible, find a manager who is good at advertising your work as well. I\'ve been very fortunate that my director (my manager\'s manager) acts as a sponsor for me. He speaks well of me when I\'m not in the room. If I send him a really good compliment, he forwards it on to his manager. This means that the executive team isn\'t only hearing about me at performance review time—they\'re hearing positive things about me throughout the year.\n\n###\n## <a name="plan-raise-profile"></a>How can you make a plan to raise your profile?\n\nI hope this article has encouraged you to raise your profile and provided you with practical steps you can take. But I don\'t want it to stop there. I encourage you to make a plan.\n\nI\'ve created a [How to Raise Your Profile Worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) you can use to make a plan and stick to it.\n\n<div align="center">\n<a href="https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_34_AM_fbf3fb1356.png" alt="Screenshot of the first page of the How to Raise Your Profile Worksheet" height="470" />\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_49_AM_f1ec211446.png" alt="Screenshot of the second page of the How to Raise Your Profile Worksheet" height="470" />\n</a>\n</div> \n\nThe first page of the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) helps you identify what your profile is and how you want it to evolve. The second page of the worksheet asks you to select what actions you can take this week, this month, and this year to raise your profile. It also asks you to describe how you will evaluate if those actions are successful and how you will hold yourself accountable.\n\nI encourage you to print out the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) and spend some time making a plan that works for you. Talk about your plan with a friend or mentor. Regularly revisit your plan to track your progress and see what actions you can take next.\n\n## Summary\n\nRaising your profile internally at your company and externally in the broader developer community is an important part of growing your career as a developer. A variety of ways exist to let people know who you are and what you can do. [Make a plan to raise your profile](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) little by little over time.\n\nI can\'t wait to hear about you in the coming weeks and months!',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/a1',
        },
        {
            authors: [],
            category: 'Video',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Continuously Building and Hosting our Swift DocC Documentation using Github Actions and Netlify 1.',
            description:
                "In this post we'll see how to use Github Actions to continuously generate the DocC documentation" +
                ' for our Swift libraries and how to publish this ' +
                'documentation so that can be accessed online, using Netlify.',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/v1',
        },

        {
            authors: [],
            category: 'Tutorial',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is a 102 tutorial',
            description:
                "Welcome (or welcome back!) to the SQL to MongoDB series. In the first post in this series, I [mapped terms and concepts from SQL to MongoDB](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb).\n\nI also introduced you to Ron. Let's take a moment and return to Ron. Ron is pretty set in his ways. For example, he loves his typewriter. It doesn't matter that computers are a bajillion times more powerful than typewriters. Until someone convinces him otherwise, he's sticking with his typewriter.\n\n<figure align=\"center\">\n    <img\n        style=\"border-radius: 10px\"\n        src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/typewriter.gif\"\n        alt=\"Ron sits at his typewriter and says 'I'm gonna type every word I know'\"\n    />\n</figure>\n\nMaybe you don't have a love for typewriters. But perhaps you have a love for SQL databases. You've been using them for years, you've learned how to make them work well enough for you, and you know that learning MongoDB will require you to change your mindset. Is it really worth the effort?\n\nYes!\n\nIn this post, we'll examine the top four reasons why you should use MongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\n> This article is based on a presentation I gave at MongoDB World and MongoDB.local Houston entitled \"From SQL to NoSQL: Changing Your Mindset.\"\n> \n> If you prefer videos over articles, check out the [recording](https://youtu.be/FFj04Apz_BE). Slides are available [here](https://www.slideshare.net/LaurenHaywardSchaefe/jumpstart-from-sql-to-nosql-changing-your-mindset).\n\n## Scale Cheaper\n\nYou can scale cheaper with MongoDB. Why?\n\nLet's begin by talking about scaling SQL databases. Typically, SQL databases scale vertically-when a database becomes too big for its server, it is migrated to a larger server.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/verticalscaling.gif\" class=\"align-center\" alt=\"Vertical scaling by migrating to larger servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Vertical scaling by migrating to larger servers</figcaption></figure>\n\nA few key problems arise with vertical scaling:\n\n* Large servers tend to be more expensive than two smaller servers with the same total capacity.\n* Large servers may not be available due to cost limitations, cloud provider limitations, or technology limitations (a server the size you need may not exist).\n* Migrating to a larger server may require application downtime.\n\nWhen you use MongoDB, you have the flexibility to scale horizontally through [sharding](https://docs.mongodb.com/manual/sharding/). Sharding is a method for distributing data across multiple servers. When your database exceeds the capacity of its current server, you can begin sharding and split it over two servers. As your database continues to grow, you can continue to add more servers. The advantage is that these new servers don't need to be big, expensive machines-they can be cheaper, commodity hardware. Plus, no downtime is required.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/horizontalscaling.gif\" class=\"align-center\" alt=\"Horizonal scaling by adding more commodity servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Horizonal scaling by adding more commodity servers</figcaption></figure>\n\n## Query Faster\n\nYour queries will typically be faster with MongoDB. Let's examine why.\n\n[Even in our simple example in the previous post](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#example-documents) where we modeled Leslie's data in SQL, we saw that her information was spread across three tables. Whenever we want to query for Leslie's information, we'll need to join three tables together.\n\nIn these three small tables, the join will be very fast. However, as the tables grow and our queries become more complex, joining tables together becomes very expensive.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/db_joins.png\" class=\"align-center\" alt=\"Representation of joining tables in a SQL database\">\n\nRecall our rule of thumb when modeling data in MongoDB: *data that is accessed together should be stored together*. When you follow this rule of thumb, most queries will not require you to join any data together.\n\nContinuing with our earlier example, if we want to retrieve Leslie's information from MongoDB, we can simply query for a single document in the `Users` collection. As a result, our query will be very fast.\n\nAs our documents and collections grow larger, we don't have to worry about our queries slowing down as long as we are using indexes and continue following our rule of thumb: *data that is accessed together should be stored together*.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/dbnojoins.png\" class=\"align-center\" alt=\"Representation of a MongoDB query with no joins\">\n\n## Pivot Easier\n\nRequirements change. Sometimes the changes are simple and require only a\nfew tweaks to the user interface. But sometimes changes go all the way\ndown to the database.\n\nIn the previous post in this series, we discovered—after implementing\nour application—that we needed to [store information about Lauren's school](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#std-label-sql-mdb-1-store-laurens-info).\nLet's take a look at this example a little more closely.\n\nTo add a new `school` column in our SQL database, we're going to have to\nalter the `Users` table. Executing the `Alter Table` command could take\na couple of hours depending on how much data is in the table. The\nperformance of our application could be decreased while the table is\nbeing altered, and we may need to schedule downtime for our application.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_parksandrec.png\" class=\"align-center\" alt=\"Alter Table command\">\n\nNow let's examine how we can do something similar in MongoDB. When our\nrequirements change and we need to begin storing the name of a user's\nschool in a `User` document, we can simply begin doing so. We can choose\nif and when to update existing documents in the collection.\n\nIf we had implemented schema validation, we would have the option of\napplying the validation to all inserts and updates or only to inserts\nand updates to documents that already meet the schema requirements. We\nwould also have the choice of throwing an error or a warning if a\nvalidation rule is violated.\n\nWith MongoDB, you can easily change the shape of your data as your app\nevolves.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_mongo.png\" class=\"align-center\" alt=\"Change the shape of your data in MongoDB without executing an Alter Table command\">\n\n## Program Faster\n\nTo be honest with you, this advantage is one of the biggest surprises to\nme. I figured that it didn't matter what you used as your backend\ndatabase—the code that interacts with it would be basically the same. I\nwas wrong.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/bensurprise.gif\" class=\"align-center\" alt=\"MFW I realized how much easier it is to code with MongoDB.\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">MFW I realized how much easier it is to code with MongoDB.</figcaption></figure>\n\nMongoDB documents map to data structures in most popular programming languages. This sounds like such a simple thing, but it makes a *humongous* difference when you're writing code.\n\nA friend encouraged me to test this out, so I did. I implemented the code to retrieve and update user profile information. My code has some simplifications in it to enable me to focus on the interactions with the database rather than the user interface. I also limited the user profile information to just contact information and hobbies.\n\nBelow is a comparison of my implementation using [MySQL](https://www.mysql.com) and MongoDB.\n\nI wrote the code in Python, but, don't worry if you're not familiar with Python, I'll walk you through it step by step. The concepts will be applicable no matter what your programming language of choice is.\n\n### Connect to the Databases\n\nLet's begin with the typical top-of-the-file stuff. We'll import what we need, connect to the database, and declare our variables. I'm going to simplify things by hardcoding the User ID of the user whose profile we will be retrieving rather than pulling it dynamically from the frontend code.\n\nMySQL\n\n``` python\nimport mysql.connector\n\n# CONNECT TO THE DB\nmydb = mysql.connector.connect(\n   host=\"localhost\",\n   user=\"root\",\n   passwd=\"rootroot\",\n   database=\"CityHall\"\n)\nmycursor = mydb.cursor(dictionary=True)\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nWe'll pass the [dictionary=True](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursordict.html) option when we create the cursor so that each row will be returned as a dictionary.\n\nMongoDB\n\n``` python\nimport pymongo\nfrom pymongo import MongoClient\n\n# CONNECT TO THE DB\nclient = MongoClient()\nclient = pymongo.MongoClient(\"mongodb+srv://root:rootroot@mycluster.mongodb.net/test?retryWrites=true&w=majority\")\ndb = client.CityHall\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nSo far, the code is pretty much the same.\n\n### Get the User's Profile Information\n\nNow that we have our database connections ready, let's use them to retrieve our user profile information. We'll store the profile information in a [Python Dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries). Dictionaries are a common data structure in Python and provide an easy way to work with your data.\n\nLet's begin by implementing the code for MySQL.\n\nSince the user profile information is spread across the `Users` table and the `Hobbies` table, we'll need to join them in our query. We can use [prepared statements](https://en.wikipedia.org/wiki/Prepared_statement) to ensure our data stays safe.\n\nMySQL\n\n``` python\nsql = \"SELECT * FROM Users LEFT JOIN Hobbies ON Users.ID = Hobbies.user_id WHERE Users.id=%s\"\nvalues = (userId,)\nmy cursor.execute(sql, values)\nuser = mycursor.fetchone()\n```\n\nWhen we execute the query, a result is returned for every user/hobby combination. When we call `fetchone()`, we get a dictionary like the following:\n\n``` python\n{u'city': u'Pawnee', u'first_name': u'Leslie', u'last_name': u'Yepp', u'user_id': 1, u'school': None, u'longitude': -86.5366, u'cell': u'8125552344', u'latitude': 39.1703, u'hobby': u'scrapbooking', u'ID': 10}\n```\n\nBecause we joined the `Users` and the `Hobbies` tables, we have a result for each hobby this user has. To retrieve all of the hobbies, we need to iterate the cursor. We'll append each hobby to a new `hobbies` array and then add the `hobbies` array to our `user` dictionary.\n\nMySQL\n\n``` python\nhobbies = []\nif (user[\"hobby\"]):\n  hobbies.append(user[\"hobby\"])\ndel user[\"hobby\"]\ndel user[\"ID\"]\nfor result in mycursor:\n  hobbies.append(result[\"hobby\"])\nuser[\"hobbies\"] = hobbies\n```\n\nNow let's implement that same functionality for MongoDB.\n\nSince we stored all of the user profile information in the `User` document, we don't need to do any joins. We can simply retrieve a single document in our collection.\n\nHere is where the big advantage that *MongoDB documents map to data structures in most popular programming languages* comes in. I don't have to do any work to get my data into an easy-to-work-with Python Dictionary. MongoDB gives me all of the results in a Python Dictionary automatically.\n\nMongoDB\n\n``` python\nuser = db['Users'].find_one({\"_id\": userId})\n```\n\nAnd that's it—we're done. What took us 12 lines for MySQL, we were able to implement in 1 line for MongoDB.\n\nOur `user` dictionaries are now pretty similar in both pieces of code.\n\nMySQL\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'school': None, \n   'cell': '8125552344', \n   'latitude': 39.1703,\n   'longitude': -86.5366,3\n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   'user_id': 1\n}\n```\n\nMongoDB\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'cell': '8125552344', \n   'location': [-86.536632, 39.170344], \n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   '_id': 1\n}\n```\n\nNow that we have retrieved the user's profile information, we'd likely send that information up the stack to the frontend UI code.\n\n### Update the User's Profile Information\n\nWhen Leslie views her profile information in our application, she may discover she needs to update her profile information. The frontend UI code would send that updated information in a Python dictionary to the Python files we've been writing.\n\nTo simulate Leslie updating her profile information, we'll manually update the Python dictionary ourselves for both MySQL and MongoDB.\n\nMySQL\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"latitude\": 38.897760,\n   \"longitude\": -77.036809,\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nMongoDB\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"location\": [-77.036809, 38.897760],\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nNow that our `user` dictionary is updated, let's push the updated information to our databases.\n\nLet's begin with MySQL. First, we need to update the information that is stored in the `Users` table.\n\nMySQL\n\n``` python\nsql = \"UPDATE Users SET first_name=%s, last_name=%s, cell=%s, city=%s, latitude=%s, longitude=%s, school=%s WHERE (ID=%s)\"\nvalues = (user[\"first_name\"], user[\"last_name\"], user[\"cell\"], user[\"city\"], user[\"latitude\"], user[\"longitude\"], user[\"school\"], userId)\nmycursor.execute(sql, values)\nmydb.commit()\n```\n\nSecond, we need to update our hobbies. For simplicity, we'll delete any existing hobbies in the `Hobbies` table for this user and then we'll insert the new hobbies into the `Hobbies` table.\n\nMySQL\n\n``` python\nsql = \"DELETE FROM Hobbies WHERE user_id=%s\"\nvalues = (userId,)\nmycursor.execute(sql, values)\nmydb.commit()\n\nif(len(user[\"hobbies\"]) > 0):\n   sql = \"INSERT INTO Hobbies (user_id, hobby) VALUES (%s, %s)\"\n   values = []\n   for hobby in user[\"hobbies\"]:\n      values.append((userId, hobby))\n   mycursor.executemany(sql,values)\n   mydb.commit()\n```\n\nNow let's update the user profile information in MongoDB. Since the user's profile information is stored in a single document, we only have to do a single update. Once again we will benefit from MongoDB documents mapping to data structures in most popular programming languages. We can send our `user` Python dictionary when we call `update_one()`, which significantly simplifies our code.\n\nMongoDB\n\n``` python\nresult = db['Users'].update_one({\"_id\": userId}, {\"$set\": user})\n```\n\nWhat took us 15 lines for MySQL, we were able to implement in 1 line for\nMongoDB.\n\n### Summary of Programming Faster\n\nIn this example, we wrote 27 lines of code to interact with our data in\nMySQL and 2 lines of code to interact with our data in MongoDB. While\nfewer lines of code is not always indicative of better code, in this\ncase, we can probably agree that fewer lines of code will likely lead to\neasier maintenance and fewer bugs.\n\nThe examples above were relatively simple with small queries. Imagine\nhow much bigger the difference would be for larger, more complex\nqueries.\n\nMongoDB documents mapping to data structures in most popular programming\nlanguages can be a huge advantage in terms of time to write, debug, and\nmaintain code.\n\nThe code above was written in Python and leveraged the Python MongoDB\nDriver. For a complete list of all of the programming languages that\nhave MongoDB drivers, visit the [MongoDB Manual](https://docs.mongodb.com/ecosystem/drivers/#drivers).\n\nIf you'd like to grab a copy of the code in the examples above, visit my\n[GitHub repo](https://github.com/mongodb-developer/SQL-to-NoSQL-Examples).\n<br>\n## Wrap Up\n\nIn this post, we discussed the top four reasons why you should use\nMongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\nBe on the lookout for the final post in this series where I'll discuss\nthe top three things you need to know as you move from SQL to MongoDB.\n",
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/t1',
        },
    ];
    const content: ContentItem[] = [
        {
            authors: [],
            category: 'Demo App',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Create a Custom Data Enabled API in MongoDB Realm in 10 Minutes or Less 1.',
            description:
                "The data behind diabetes management can be overwhelming — understanding it all is empowering. Tidepool turns diabetes data points into accessible, actionable, and meaningful insights using an open source tech stack that incorporates MongoDB. Tidepool is a nonprofit organization founded by people with diabetes, caregivers, and leading healthcare providers committed to helping all people with dependent diabetes safely achieve great outcomes through more accessible, actionable, and meaningful diabetes data.\n\nThey are committed to empowering the next generation of innovations in diabetes management. We harness the power of technology to provide intuitive software products that help people with diabetes.\n\nIn this episode of the MongoDB Podcast, Michael and Nic sit down with Tapani Otala, V.P. of Engineering at Tidepool, to talk about their platform, how it was built, and how it uses MongoDB to provide unparalleled flexibility and visibility into the critical data that patients use to manage their condition. \n\n:youtube[]{vid=Ocf6ZJiq7ys}\n\n### MongoDB Podcast - Tidepool with Tapani Otala and Christopher Snyder\n### \n\n**Tapani: [00:00:00]** Hi, my name is Tapani Otala. I'm the VP of engineering at [Tidepool](https://tidepool.org). We are a nonprofit organization whose mission is to make diabetes data more accessible, meaningful, and actionable. The software we develop is designed to integrate [00:01:00] data from various diabetes devices like insulin pumps, continuous glucose monitors, and blood glucose meters into a single intuitive interface that allows people with diabetes and their care team to make sense of that data.\nAnd we're using Mongo DB to power all this. Stay tuned for more.\n\n**Chris: [00:00:47]**\nMy name is Christopher Snyder. I've been living with type one diabetes since 2002. I'm also Tidepool's community and clinic success manager. Having this data available to me just gives me the opportunity to make sense of everything that's happening. Prior to using Tidepool, if I wanted to look at my data, I either had to write everything down and keep track of all those notes.\nOr I do use proprietary software for each of my devices and then potentially print things out and hold them up to the light to align events and data points and things like that. Because Tidepool brings everything together in one place, I am biased. I think it looks real pretty. It makes it a lot easier for me to identify trends, make meaningful changes in my diabetes management habits, and hopefully lead a healthier life.\n\n**Mike: [00:01:28]** So we're talking today about Tidepool and maybe you could give us a quick description of what Tidepool is and who it may appeal to \n**Tapani: [00:01:38] **We're a nonprofit organization. And we're developing software that helps people with diabetes manage that condition. We enable people to upload data from their devices, different types of devices, like glucose monitors, meters, insulin pumps, and so on into a single place where you can view that data in one place.\nAnd you can share it with your care team members like doctors, clinicians, or [00:02:00] your family members. They can view that data in real time as well.\n \n**Mike: [00:02:03]** Are there many companies that are doing this type of thing today?\n\n**Tapani: [00:02:06]** There are a \nfew companies, as far as I'm aware, the only non-profit in this space though. Everything else is for profit.\nAnd there are a lot of companies that look at it from diabetes, from different perspective. They might work with type two diabetes or type one. We work with any kind. There's no difference.  \n\n**Nic: [00:02:24]** In regards to Tidepool, are you building hardware as well as software? Or are you just looking at data? Can you shed some more light into that?\n\n**Tapani: [00:02:33]** Sure. We're a hundred percent software company. We don't make any other hardware. We do work with lots of great manufacturers of those devices in the space and medical space in general, but in particular diabetes that make those devices. And so we collaborate with them.\n\n**Mike: [00:02:48]** So what stage is Tidepool in today? Are you live? \n\n**Tapani: [00:02:50]** Yeah, we've been live since 2013 and we we've grown since a fair bit. And we're now at 33 or so people, but still, I guess you could consider as a [00:03:00] startup, substance. So \n\n**Nic: [00:03:01]** I'd actually like to dig deeper into the software that Tidepool produces.\nSo you said that there are many great hardware manufacturers working in this space. How are you obtaining that data? Are you like a mobile application connecting to the hardware? Are you some kind of IoT or are they sending you that information and you're working with it at that point?\n\n**Tapani: [00:03:22]** So it really depends on the device and the integration that we have. For most devices, we talk directly to the device. So these are devices that you would use at your home and you connect them to a PC over Bluetooth or USB or your phone for that matter. And we have software that can read the data directly from the device and upload it to our backend service that's using Mongo DB to store that data. \n\n**Mike: [00:03:43]** Is there a common format that is required in order to send data to Tidepool? \n\n**Tapani: [00:03:49]** We wish. That would make our life a whole lot simpler. No, actually a good chunk of the work that's involved in here is writing software that knows how to talk to each individual device.\nAnd there's some [00:04:00] families of devices that, that use similar protocols and so on, but no, there's no really universal protocol that talk to the devices or for the format of the data that comes from the devices for that matter. So a lot of the work goes into normalizing that data so that when it is stored in in our backend, it's then visible and viewable by people.\n\n**Nic: [00:04:21]** So we'll get to this in a second. It does sound like a perfect case for a kind of a document database, but in regards to supporting all of these other devices, so I imagine that any single device over its lifetime might experience different kind of data output through the versions.\nWhat kind of compatibility is Tidepool having on these devices? Do you use, do say support like the latest version or? Maybe you can shed some light on that, how many devices in general you're supporting. \nTapani: [00:04:50] Right now, we support over 50 different devices. And then by extension anything that Apple Health supports.\nSo if you have a device that stores data in apple [00:05:00] health kit, we can read that as well. But 50 devices directly. You can actually go to type bullet org slash devices, and you can see the list full list there. You can filter it by different types of devices and manufacturers and so on. And that those devices are some of them are actually obsolete at this point.\nThey're end of life. You can't buy them anymore. So we support devices even long past the point when there've been sold. We try to keep up with the latest devices, but that's not always feasible.\n\n**Mike: [00:05:26]** This is it's like a health oriented IOT application right? \n\n**Tapani: [00:05:30]** Yeah. In a way that that's certainly true.\nThe only difference here maybe is that those devices don't directly usually connect to the net. So they need an intermediary. Like in our case, we have a mobile application. We have a desktop application that talks to the device that's in your possession, but you can't reach the device directly over internet.\n\n**Mike:** And just so we can understand the scale, how many devices are reporting into Tidepool today?\n\n**Tapani:** I don't actually know exactly how many devices there are. Those are discreet different types of devices. [00:06:00] What I can say is our main database production database, we're storing something it's approaching to 6 billion documents at this point\nin terms of the amount of data across across and hundreds of thousands of users. \n\n**Nic: [00:06:11]**  Just for clarity, because I want to get to, because the diabetes space is not something I'm personally too familiar in. And the different hardware that exists. So say I'm a user of the hardware and it's reporting to Tidepool.\nIs Tidepool gonna alert you if there's some kind of low blood sugar level or does it serve a different purpose? \n\n**Tapani: [00:06:32]** Both. And this is actually a picture that's changing. So right now what we have out there in terms of the products, they're backward looking. So what happened in the past, but you might might be using these devices and you might upload data, a few times a day.\nBut if you're using some of the more, more newer devices like continuous glucose monitors, those record data every five minutes. So the opposite frequency, it could be much higher, but that's going to change going [00:07:00] forward as more and more people start using this continuous glucose monitors that are actually doing that. For the older devices might be, this is classic fingerprint what glucose meter or you poke your finger, or you draw some little bit of blood and you measure it and you might do that five to 10 times a day.\nVersus 288 times, if you have a glucose monitor, continuous glucose monitor that sends data every five minutes. So it varies from device to device.  \n\n**Mike: [00:07:24]**  This is a fascinating space. I test myself on a regular basis as part of my diet not necessarily for diabetes, but for for ketosis and that's an interesting concept to me. The continuous monitoring devices, though,\nthat's something that you attach to your body, right? \n\n**Tapani: [00:07:39]**  Yeah. These are little devices about the size of a stack of quarters that sits somewhere on your skin, on an arm or leg or somewhere on your body. There's a little filament that goes onto your skin, that does the actual measurements, but it's basically a little full. \n\n**Mike: [00:07:54]**  So thinking about the application itself and how you're leveraging MongoDB, do you want to talk a little bit about how the [00:08:00] application comes together and what the stack looks like?\n\n**Tapani: [00:08:01]**  Sure. So we're hosted in AWS, first of all. We have about 20 or so microservices in there. And as part of those microservices, they all communicate to all MongoDB Atlas.\nThat's implemented with the sort of best practices of suppose security in mind because security and privacy are critically important for us. So we're using the busy gearing from our microservices to MongoDB Atlas. And we're using a three node replica set in MongoDB Atlas, so that there's no chance of losing any of that data.\n\n**Mike: [00:08:32]**  And in terms of the application itself, is it largely an API? I'm sure that there's a user interface or your application set, but what does the backend or the API look like in terms of the technology? \n\n**Tapani: [00:08:43]**  So, what people see in front of them as a, either a desktop application or mobile application, that's the visible manifestation of it.\nBoth of those communicate to our backend through a set of rest APIs for authentication authorization, data upload, data retrieval, and so on. Those APIs then take that data and they store it in our MongoDB production cluster. So the API is very from give me our user profile to upload this pile of continuous glucose monitor samples.\n\n**Mike: [00:09:13]**  What is the API written in? What technologies are you using?\n\n**Tapani: [00:09:16]**  It's a mix of Node JS and Golang. I would say 80% Golang and 20% Node JS. \n\n**Nic: [00:09:23]** I'm interested in why Golang for this type of application. I wouldn't have thought it as a typical use case. So are you able to shed any light on that? \n\n**Tapani: [00:09:32]** The decision to switch to Golang? And so this actually the growing set of services. That happened before my time. I would say it's pretty well suited for this particular application. This, the backend service is fundamentally, it's a set of APIs that have no real user visible manifestation themselves.\nWe do have a web service, a web front end to all this as well, and that's written in React and so on,  but the Golang is proven to be a very good language for developing this, services specifically that respond to API requests because really all they do is they're taking a bunch of inputs from the, on the caller and translating, applying business policy and so on, and then storing the data in Mongo.\nSo it's a good way to do it. \n\n**Nic: [00:10:16]** Awesome. So we know that you're using Go and Node for your APIs, and we know that you're using a MongaDB as your data layer. What features in particular using with MongoDB specifically? \n\n**Tapani: [00:10:26]** So right now, and I mentioned we were running a three node replica set.\nWe don't yet use sharding, but that's actually the next big thing that we'll be tackling in the near future because that set of data that we have is growing fairly fast and it will be growing very fast, even faster in the future with a new product coming out. But sharding will be next one.\nWe do a lot of aggregate queries across several different collections. So some fairly complicated queries. And as I mentioned, that largest collection is fairly large. So performance, that becomes critical. Having the right indices in place and being able to look for all the right data is critical.\n\n**Nic: [00:11:07]** You mentioned aggregations across numerous collections at a high level. Are you able to talk us through what exactly you're aggregating to give us an idea of a use case. \n\n**Tapani: [00:11:16]** Yeah. Sure. In fact, the one thing I should've mentioned earlier perhaps is besides being non-profit, we're also open source.\nSo everything we do is actually visible on GitHub in our open-source repo. So if anybody's interested in the details, they're welcome to take a look in there. But in the sort of broader sense, we have a user collection where all the user accounts profiles are stored. We have a data collection or device data collection, rather.\nThat's where all the data from diabetes devices goes. There's other collections for things like messages that we sent to the users, emails, basically invitations to join this account or so on and confirmations of those and so different collections for different use cases. Broadly speaking is it's, there's one collection for each use case like user profiles or messages, notifications, device data.\n\n**Mike: [00:12:03]** And I'm thinking about the schema and the aggregations across multiple collections. Can you share what that schema looks like? And maybe even just the number of collections that you're storing. \n\n**Tapani: [00:12:12]** Sure. Number of collections is actually relatively small. It's only a half a dozen or so, but the schema is pretty straightforward for most of them.\nThey like the user profiles. There's only so many things you store in a user profile, but that device data collection is perhaps the most complex because it stores data from all the devices, regardless of type. So the data that comes out of a continuous glucose monitor is different than the data that comes from an insulin pump.\nFor instance, for example. So there's different fields. There are different units that we're dealing with and so on. \n\n**Mike: [00:12:44]** Okay, so Tapani, what other features within the Atlas platform are you leveraging today? And have you possibly look at automated scalability as a solution moving forward?\n\n**Tapani: [00:12:55]** So our use of MongoDB Atlas right now is pretty straightforward and intensive. So a  lot of data in the different collections, indices and aggregate queries that are used to manage that data and so on. The things that we're looking forward in the future are things like sharding because of the scale of data that's growing.\nOther things are a data lake, for instance, archiving some of the data. Currently our production database stores all the data from 2013 onwards. And really the value of that data beyond the past few months to a few years is not that important. So we'd want to archive it. We can't lose it because it's important data, but we don't want to archive it and move it someplace else.\nSo that, and bucketizing the data in the more effective ways. And so it's faster to access by different stakeholders in the company.\n\n**Mike: [00:13:43]** So some really compelling features that are available today around online archiving. I think we can definitely help out there. And coming down the pike, we've got some really exciting stuff happening in the time series space.\nSo stay tuned for that. We'll be talking more about that at our .live conference in July. So stay tuned for that. \n\n**Nic: [00:14:04]** Hey Mike, how about you to give a plug about that conference right now?\n\n**Mike: [00:14:06]** Yeah, sure. It's our biggest user conference of the year. And we get together, thousands of developers join us and we present all of the feature updates.\nWe're going to be talking about MongoDB 5.0, which is the latest upcoming release and some really super exciting announcements there. There's a lot of breaks and brain breaking activities and just a great way to get plugged into the MongoDB community. You can get more information at mongodb.com/live.\nSo Tapani, thanks so much for sharing the details of how you're leveraging Mongo DB. As we touched on earlier, this is an application that users are going to be sharing very sensitive details about their health. Do you want to talk a little bit about the security?\n\n**Tapani: [00:14:49]** Sure. Yeah, it's actually, it's a critically important piece for us. So first of all of those APS that we talked about earlier, those are all the traffic is encrypted in transit. There's no unauthorized or unauthenticated access to any other data or API. In MongoDB Atlas, what we're obviously leveraging is we use the encryption at rest.\nSo all the data that's stored by MongoDB is encrypted. We're using VPC peering between our services and MongoDB Atlas, to make sure that traffic is even more secure. And yeah, privacy and security of the data is key thing for us, because this is all what what the health and human services calls, protected health information or PHI. That's the sort of highest level of private information you could possibly have.\n\n**Nic: [00:15:30]** So in regards to the information being sent, we know that the information is being encrypted at rest. Are you collecting data that could be sensitive, like social security numbers and things like that that might need to be encrypted at a field level to prevent prying eyes of DBAs and similar?\n\n**Tapani: [00:15:45]** We do not collect any social security information or anything like that. That's purely healthcare data. Um, diabetes device data, and so on. No credit cards. No SSNs.\n\n**Nic: [00:15:56]** Got it. So nothing that could technically tie the information back to an individual or be used in a malicious way?\n\n**Tapani: [00:16:02]**  Not in that way now. I mean, I think it's fair to say that this is obviously people's healthcare information, so  that is sensitive regardless of whether it could be used maliciously or not. \n\n**Mike: [00:16:13]** Makes sense. Okay. So I'm wondering if you want to talk a little bit about what's next for Tidepool. You did make a brief mention of another application that you'll be launching.\nMaybe talk a little bit about the roadmap. \n\n**Tapani: [00:16:25]** Sure. We're working on, besides the existing products we're working on a new product that's called Tidepool Loop and that's an effort to build an automatic insulin dosing system. This takes a more proactive role in the treatment of diabetes.\nExisting products show data that you already have. This is actually helping you administer insulin. And so it's a smartphone application that's currently under FDA review. We are working with a couple of great partners and the medical device space to launch that with them, with their products. \n\n**Mike: [00:16:55]** Well, I love the open nature of Tidepool.\nIt seems like everything you're doing is kind of out in the open. From open source to full disclosure on the architecture stack. That's something that that I can really appreciate as a developer. I love the ability to kind of dig a little deeper and see how things work.\nIs there anything else that you'd like to cover from an organizational perspective? Any other details you wanna share? \n\n**Tapani: [00:17:16]** Sure. I mean, you mentioned the transparency and openness. We practice what some people might call radical transparency. Not only is our software open source. It's in GitHub.\nAnybody can take a look at it. Our JIRA boards for bugs and so on. They're also open, visible to anybody. Our interactions with the FDA, our meeting minutes, filings, and so on. We also make those available. Our employee handbook is open. We actually forked another company's employee handbook, committed ours opened as well.\nAnd in the hopes that people can benefit from that. Ultimately, why we do this is we hope that we can help improve public health by making everything as, as much as possible we can do make it publicly. And as far as the open source projects go, we have a, several people out there who are making open source contributions or pull requests and so on. Now, because we do operate in the healthcare space,\nwe have to review those submissions pretty carefully before we integrate them into the product. But yeah, we do take to take full requests from people we've gotten community submissions, for instance, translations to Spanish and German and French products. But we'd have to verify those before we can roll them up.\n\n**Mike: [00:18:25]** Well, this has been a great discussion. Is there anything else that you'd like to share with the audience before we begin to wrap up? \n\n**Tapani: [00:18:29]** Oh, a couple of things it's closing. So I was, I guess it would be one is first of all we're a hundred percent remote first and globally distributed organization.\nWe have people in five countries in 14 states within the US right now. We're always hiring in some form or another. So if anybody's interested in, they're welcome to take a look at our job postings tidepool.org/jobs. The other thing is as a nonprofit, we tend suddenly gracefully accept donations as well.\nSo there's another link there that will donate. And if anybody's interested in the technical details of how we actually built this all, there's a couple of links that I can throw out there. One is tidepool.org/pubsecc, that'll be secc, that's a R a security white paper, basically whole lot of information about the architecture and infrastructure and security and so on.\nWe also publish a series of blood postings, at tidepool.org/blog, where the engineering team has put out a couple of things in there about our infrastructure. We went through some pretty significant upgrades over the past couple of years, and then finally github.com/tidepool is where are all our sources.\n\n**Nic: [00:19:30]** Awesome. And you mentioned that you're a remote company and that you were looking for candidates. Were these candidates global, strictly to the US, does it matter?\n\n**Tapani: [00:19:39]**  So we hire anywhere people are, and they work from wherever they are. We don't require relocation. We don't require a visa in that sense that you'd have to come to the US, for instance, to work. We have people in five countries, us, Canada, UK, Bulgaria, and Croatia right now.\n\n**Mike: [00:19:55]** Well, Tapani I want to thank you so much for joining us today. I really enjoyed the conversation. \n\n**Tapani: [00:19:58]** Thanks as well. Really enjoyed it.",
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/d1',
        },
        {
            authors: [],
            category: 'Demo App',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Create a Custom Data Enabled API in MongoDB Realm in 10 Minutes or Less 2.',
            description:
                'Do you hesitate to upgrade MongoDB, for fear the new database will be incompatible with your existing code?\n\nOnce you\'ve written and deployed your MongoDB application, you want to be able to upgrade your MongoDB database at will, without worrying that a behavior change will break your application. In the past, we\'ve tried our best to ensure each database release is backward-compatible, while also adding new features. But sometimes we\'ve had to break compatibility, because there was no other way to fix an issue or improve behavior. Besides, we didn\'t have a single definition of backward compatibility.\n\nSolving this problem is more important now: We\'re releasing new versions [four times a year instead of one](https://www.mongodb.com/blog/post/new-quarterly-releases-starting-with-mongodb-5-0), and we plan to go faster in the future. We want to help you upgrade frequently and take advantage of new features, but first you must feel confident you can upgrade safely. Ideally, you could immediately upgrade all your applications to the latest MongoDB whenever we release.\n\nThe [MongoDB Stable API](https://docs.mongodb.com/manual/reference/stable-api/) is how we will make this possible. The Stable API encompasses the subset of MongoDB commands that applications commonly use to read and write data, create collections and indexes, and so on. We commit to keeping these commands backward-compatible in new MongoDB versions. We can add new features (such as new command parameters, new aggregation operators, new commands, etc.) to the Stable API, but only in backward-compatible ways.\n\nWe follow this principle:\n\n> For any API version V, if an application declares API version V and uses only behaviors in V, and it is deployed along with a specific version of an official driver, then it will experience no semantically significant behavior changes resulting from database upgrades so long as the new database supports V.\n\n(What\'s a semantically **insignificant** behavior change? Examples include the text of some error message, the order of a query result if you **don\'t** explicitly sort it, or the performance of a particular query. Behaviors like these, which are not documented and don\'t affect correctness, may change from version to version.)\n\nTo use the Stable API, upgrade to the latest driver and create your application\'s MongoClient like this:\n\n```js\nclient = MongoClient(\n  "mongodb://host/",\n  api={"version": "1", "strict": True})\n  ```\n\nFor now, "1" is the only API version. Passing "strict": True means the database will reject all commands that aren\'t in the Stable API. For example, if you call replSetGetStatus, which isn\'t in the Stable API, you\'ll receive an error:\n\n```js\n{\n  "ok" : 0,\n  "errmsg" : "Provided apiStrict:true, but replSetGetStatus is not in API Version 1",\n  "code" : 323,\n  "codeName" : "APIStrictError"\n}\n```\n\nRun your application\'s test suite with the new MongoClient options, see what commands and features you\'re using that are outside the Stable API, and migrate to versioned alternatives. For example, "mapreduce" is not in the Stable API but "aggregate" is. Once your application uses only the Stable API, you can redeploy it with the new MongoClient options, and be confident that future database upgrades won\'t affect your application.\n\nThe mongosh shell now supports the Stable API too:\n\n```bash\nmongosh --apiVersion 1 --apiStrict\n```\n\nYou may need to use unversioned features in some part of your application, perhaps temporarily while you are migrating to the Stable API, perhaps permanently. The **escape hatch** is to create a non-strict MongoClient and use it just for using unversioned features:\n\n```PYTHON\n# Non-strict client.\nclient = MongoClient(\n  "mongodb://host/",\n  api={"version": "1", "strict": False})\n\nclient.admin.command({"replSetGetStatus": 1})\n```\n\nThe "strict" option is false by default, I\'m just being explicit here. Use this non-strict client for the few unversioned commands your application needs. Be aware that we occasionally make backwards-incompatible changes in these commands.\n\nThe only API version that exists today is "1", but in the future we\'ll release new API versions. This is exciting for us: MongoDB has a few warts that we had to keep for compatibility\'s sake, but the Stable API gives us a safe way to remove them. Consider the following:\n\n```PYTHON\nclient = MongoClient("mongodb://host")\nclient.test.collection.insertOne({"a": [1]})\n\n# Strangely, this matches the document above.\nresult = client.test.collection.findOne(\n  {"a.b": {"$ne": null}})\n  ```\n\nIt\'s clearly wrong that `{"a": [1]}` matches the query `{"a.b": {"$ne": null}}`, but we can\'t fix this behavior, for fear that user\'s applications rely on it. The Stable API gives us a way to safely fix this. We can provide cleaner query semantics in Version 2:\n\n```PYTHON\n# Explicitly opt in to new behavior.\nclient = MongoClient(\n  "mongodb://host/",\n  api={"version": "2", "strict": True})\n\nclient.test.collection.insertOne({"a": [1]})\n\n# New behavior: doesn\'t match document above.\nresult = client.test.collection.findOne(\n  {"a.b": {"$ne": null}})\n  ```\n  \nFuture versions of MongoDB will support **both** Version 1 and 2, and we\'ll maintain Version 1 for many years. Applications requesting the old or new versions can run concurrently against the same database. The default behavior will be Version 1 (for compatibility with old applications that don\'t request a specific version), but new applications can be written for Version 2 and get the new, obviously more sensible behavior.\n\nOver time we\'ll deprecate some Version 1 features. That\'s a signal that when we introduce Version 2, those features won\'t be included. (Future MongoDB releases will support both Version 1 with deprecated features, and Version 2 without them.) When the time comes for you to migrate an existing application from Version 1 to 2, your first step will be to find all the deprecated features it uses:\n\n```PYTHON\n# Catch uses of features deprecated in Version 1.\nclient = MongoClient(\n  "mongodb://host/",\n  api={"version": "1",\n       "strict": True,\n       "deprecationErrors": True})\n```       \n\nThe database will return an APIDeprecationError whenever your code tries to use a deprecated feature. Once you\'ve run your tests and fixed all the errors, you\'ll be ready to test your application with Version 2.\n\nVersion 2 might be a long way off, though. Until then, we\'re continuing to add features and make improvements in Version 1. We\'ll introduce new commands, new options, new aggregation operators, and so on. Each change to Version 1 will be an **extension** of the existing API, and it will never affect existing application code. With quarterly releases, we can improve MongoDB faster than ever before. Once you\'ve upgraded to 5.0 and migrated your app to the Stable API, you can always use the latest release fearlessly.\n\nYou can try out the Stable API with the MongoDB 5.0 Release Candidate, which is available now from our [Download Center](https://www.mongodb.com/try/download/community). \n\n## Appendix\n\nHere\'s a list of commands included in API Version 1 in MongoDB 5.0. You can call these commands with version "1" and strict: true. (But of course, you can also call them without configuring your MongoClient\'s API version at all, just like before.) We won\'t make backwards-incompatible changes to any of these commands. In future releases, we may add features to these commands, and we may add new commands to Version 1.\n\n* [abortTransaction](https://docs.mongodb.com/manual/reference/command/abortTransaction/)\n* [aggregate](https://docs.mongodb.com/manual/reference/command/aggregate/#mongodb-dbcommand-dbcmd.aggregate)\n* [authenticate](https://docs.mongodb.com/manual/reference/command/authenticate/#mongodb-dbcommand-dbcmd.authenticate)\n* [collMod](https://docs.mongodb.com/manual/reference/command/collMod/#mongodb-dbcommand-dbcmd.collMod)\n* [commitTransaction](https://docs.mongodb.com/manual/reference/command/commitTransaction/#mongodb-dbcommand-dbcmd.commitTransaction)\n* [create](https://docs.mongodb.com/manual/reference/command/create/#mongodb-dbcommand-dbcmd.create)\n* [createIndexes](https://docs.mongodb.com/manual/reference/command/createIndexes/#mongodb-dbcommand-dbcmd.createIndexes)\n* [delete](https://docs.mongodb.com/manual/reference/command/delete/#mongodb-dbcommand-dbcmd.delete)\n* [drop](https://docs.mongodb.com/manual/reference/command/drop/#mongodb-dbcommand-dbcmd.drop)\n* [dropDatabase](https://docs.mongodb.com/manual/reference/command/dropDatabase/#mongodb-dbcommand-dbcmd.dropDatabase)\n* [dropIndexes](https://docs.mongodb.com/manual/reference/command/dropIndexes/#mongodb-dbcommand-dbcmd.dropIndexes)\n* [endSessions](https://docs.mongodb.com/manual/reference/command/endSessions/#mongodb-dbcommand-dbcmd.endSessions)\n* [explain](https://docs.mongodb.com/manual/reference/command/explain/#mongodb-dbcommand-dbcmd.explain) (we won\'t make incompatible changes to this command\'s input parameters, although its output format may change arbitrarily)\n* [find](https://docs.mongodb.com/manual/reference/command/find/#mongodb-dbcommand-dbcmd.find)\n* [findAndModify](https://docs.mongodb.com/manual/reference/command/findAndModify/#mongodb-dbcommand-dbcmd.findAndModify)\n* [getMore](https://docs.mongodb.com/manual/reference/command/getMore/#mongodb-dbcommand-dbcmd.getMore)\n* [hello](https://docs.mongodb.com/manual/reference/command/hello/#mongodb-dbcommand-dbcmd.hello)\n* [insert](https://docs.mongodb.com/manual/reference/command/insert/#mongodb-dbcommand-dbcmd.insert)\n* [killCursors](https://docs.mongodb.com/manual/reference/command/killCursors/#mongodb-dbcommand-dbcmd.killCursors)\n* [listCollections](https://docs.mongodb.com/manual/reference/command/listCollections/#mongodb-dbcommand-dbcmd.listCollections)\n* [listDatabases](https://docs.mongodb.com/manual/reference/command/listDatabases/#mongodb-dbcommand-dbcmd.listDatabases)\n* [listIndexes](https://docs.mongodb.com/manual/reference/command/listIndexes/#mongodb-dbcommand-dbcmd.listIndexes)\n* [ping](https://docs.mongodb.com/manual/reference/command/ping/#mongodb-dbcommand-dbcmd.ping)\n* [refreshSessions](https://docs.mongodb.com/manual/reference/command/refreshSessions/#mongodb-dbcommand-dbcmd.refreshSessions)\n* saslContinue\n* saslStart\n* [update](https://docs.mongodb.com/manual/reference/command/update/)\n\n## Safe Harbor\n\nThe development, release, and timing of any features or functionality described for our products remains at our sole discretion. This information is merely intended to outline our general product direction and it should not be relied on in making a purchasing decision nor is this a commitment, promise or legal obligation to deliver any material, code, or functionality.\n',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/d2',
        },
        {
            authors: [],
            category: 'Demo App',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Create a Custom Data Enabled API in MongoDB Realm in 10 Minutes or Less 3.',
            description:
                'The Realm team is happy to announce the beta release of our Realm Kotlin SDK—with support for both Kotlin for Android and Kotlin Multiplatform apps. With this release, you can deploy and maintain a data layer across iOS, Android, and desktop platforms from a single Kotlin codebase.\n\n:youtube[]{vid=6vL5h8pbt5g}\n\nRealm is a super fast local data store that makes storing, querying, and syncing data simple for modern applications. With Realm, working with your data is as simple as interacting with objects from your data model. Any updates to the underlying data store will automatically update your objects, enabling you to refresh the UI with first-class support for Kotlin’s programming primitives such as Coroutines, Channels, and Flows. \n\n## Introduction\n\nOur goal with Realm has always been to provide developers with the tools they need to easily build data-driven, reactive mobile applications. Back in 2014, this meant providing Android developers with a first-class Java SDK. But the Android community is changing. With the growing importance of Kotlin, our team had two options: refactor the existing Realm Java SDK to make it Kotlin-friendly or use this as an opportunity to build a new SDK from the ground up that is specifically tailored to the needs of the Kotlin community. After collecting seven years of feedback from Android developers, we chose to build a new Kotlin-first SDK that pursued the following directives:\n\n* Expose Realm APIs that are idiomatic and directly integrate with Kotlin design patterns such as Coroutines and Flows, eliminating the need to write glue code between the data layer and the UI.\n* Remove Realm Java’s thread confinement for Realms and instead emit data objects as immutable structs, conforming to the prevalent design pattern on Android and other platforms.\n* Expose a single Realm singleton instance that integrates into Android’s lifecycle management automatically, removing the custom code needed to spin up and tear down Realm instances on a per-activity or fragment basis.\n\n## What is Realm?\n\nRealm is a fast, easy-to-use alternative to SQLite + Room with built-in cloud capabilities, including a real-time edge-to-cloud sync solution. Written from the ground up in C++, it is not a wrapper around SQLite or any other relational data store. Designed with the mobile environment in mind, it is lightweight and optimizes for constraints like compute, memory, bandwidth, and battery that do not exist on the server side. Realm uses lazy loading and memory mapping with each object reference pointing directly to the location on disk where the state is stored. This exponentially increases lookup and query speed as it eliminates the loading of state pages of disk space into memory to perform calculations. It also reduces the amount of memory pressure on the device while working with the data layer. Simply put, Realm makes it easy to store, query, and sync your mobile data across devices and the back end.\n\n## Realm for Kotlin developers\n\nRealm is an object database, so your schema is defined in the same way you define your object classes. Under the hood, Realm uses a Kotlin compiler plugin to generate the necessary getters, setters, and schema for your database, freeing Android developers from the monotony of Room’s DAOs and the pain of investigating inaccurate SQL query responses from SQLite. \n\nRealm also brings true relationships to your object class definitions, enabling you to have one-to-one, one-to-many, many-to-many, and even inverse relationships. And because Realm objects are memory-mapped, traversing the object graph across relationships is done in the blink of an eye. \n\nAdditionally, Realm delivers a simple and intuitive query system that will feel natural to Kotlin developers. No more context switching to SQL to instantiate your schema or looking behind the curtain when an ORM fails to translate your calls into SQL. \n\n```kotlin\n// Define your schema - Notice Project has a one-to-many relationship to Task\nclass Project : RealmObject {\n    var name: String = ""\n    var tasks: RealmList<Task> = realmListOf()\n}\n\nclass Task : RealmObject {\n    var name: String = ""\n    var status: String = "Open"\n    var owner: String = ""\n}\n\n// Set the config and open the realm instance\nval easyConfig = RealmConfiguration.with(schema = setOf(Task::class, Project::class))\n\nval realm: Realm = Realm.open(easyConfig)\n\n// Write asynchronously using suspend functions\nrealm.write { // this: MutableRealm\n    val project = Project().apply {\n        name = "Kotlin Beta"\n    }\n    val task = Task().apply {\n        name = "Ship It"\n        status = "InProgress"\n        owner = "Christian"\n    }\n    project.tasks = task\n    copyToRealm(project)\n}\n\n// Get a reference to the Project object\nval currentProject: Project =\n    realm.query<Project>(\n        "name == $0", "Kotlin Beta"\n    ).first().find()!!\n\n// Or query multiple objects\nvall allTasks: RealmResults<Project> = \n    realm.query<Project>().find()\n\n// Get notified when data changes using Flows\ncurrentProject.tasks.asFlow().collect { change: ListChange<Task> ->\n    when (change) {\n        is InitialList<Task> -> {\n            // Display initial data on UI\n            updateUI(change.list)\n        }\n        is UpdatedList<Task> -> {\n            // Get information about changes compared\n            // to last version.\n            Log.debug("Changes: ${change.changeRanges}")\n            Log.debug("Insertions: ${change.insertionRanges}")\n            Log.debug("Deletions: ${change.deletionRanges}")\n            updateUI(change.list)\n        }\n        is DeletedList<Task> -> {\n            updateUI(change.list) // Empty list\n        }\n    }\n}\n\n// Write synchronously - this blocks execution on the caller thread \n// until the transaction is complete\nrealm.writeBlocking { // this: MutableRealm\n    val newTask = Task().apply {\n        name = "Write Blog"\n        status = "InProgress"\n        owner = "Ian"\n    }\n\n    findLatest(currentProject)?.apply {\n        tasks.add(newTask)\n    }\n}\n\n// The UI will now automatically display two tasks because \n// of the above defined Flow on currentProject\n```\nFinally, one of Realm’s main benefits is its out-of-the-box data synchronization solution with MongoDB Atlas. Realm Sync makes it easy for developers to build reactive mobile apps that stay up to date in real-time.\n\n## Looking ahead\n\nThe Realm Kotlin SDK is a free and open source database available for you to get started building applications with today! With this beta release, we believe that all of the critical components for building a production-grade data layer in an application are in place. In the future, we will look to add embedded objects; data types such as Maps, Sets, and the Mixed type; ancillary sync APIs as well as support for [Flexible Sync](https://docs.mongodb.com/realm/sdk/java/examples/flexible-sync/); and finally, some highly optimized write and query helper APIs with the eventual goal of going GA later this year.\n\nGive it a try today and [let us know what you think](http://forums.realm.io)! Check out our [samples](https://github.com/realm/realm-kotlin-samples), read our [docs](https://docs.mongodb.com/realm/sdk/kotlin/), and follow our [repo](https://github.com/realm/realm-kotlin).\n\n>For users already familiar with Realm Java, check out the video at the top of this article if you haven\'t already, or our migration blog post and [documentation](https://docs.mongodb.com/realm/sdk/kotlin/migrate-from-java-sdk-to-kotlin-sdk/) to see what is needed to port over your existing implementation.\n\n',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/d3',
        },
        {
            authors: [],
            category: 'Video',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Continuously Building and Hosting our Swift DocC Documentation using Github Actions and Netlify 1.',
            description:
                "In this post we'll see how to use Github Actions to continuously generate the DocC documentation" +
                ' for our Swift libraries and how to publish this ' +
                'documentation so that can be accessed online, using Netlify.',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/v1',
        },
        {
            authors: [],
            category: 'Video',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Continuously Building and Hosting our Swift DocC Documentation using Github Actions and Netlify 2.',
            description:
                "In this post we'll see how to use Github Actions to continuously generate the DocC documentation" +
                ' for our Swift libraries and how to publish this ' +
                'documentation so that can be accessed online, using Netlify.',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/v2',
        },
        {
            authors: [],
            category: 'Video',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'Continuously Building and Hosting our Swift DocC Documentation using Github Actions and Netlify 3.',
            description:
                "In this post we'll see how to use Github Actions to continuously generate the DocC documentation" +
                ' for our Swift libraries and how to publish this ' +
                'documentation so that can be accessed online, using Netlify.',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/v3',
        },
        {
            authors: [],
            category: 'Article',
            title: 'This is 101 article',
            description:
                'Last summer, I was bugging my boss [Joe Drumgoole](https://twitter.com/jdrumgoole) for a promotion. I asked him what I needed to do in order to get promoted. He explained that I was doing great work, but I needed to raise my profile internally at the company. He said that my MongoDB colleagues needed to know my name and my work.\n\nThis advice felt exceptionally challenging as we were in the middle of the pandemic, and I had no hope of seeing my colleagues in person and striking up an impromptu conversation. I realized I was going to have to work strategically to raise my profile.\n\nI sought the advice of [Ken Alger](https://www.linkedin.com/in/kenwalger/) who provided me with several suggestions on how to raise my profile. I disliked his advice as it was going to push me out of my comfort zone, but I decided to try it anyway.\n\nKen\'s advice worked. I raised my profile and was rewarded with a promotion.\n\n![A comic book style animation of a conversation between Lauren, Joe, and Ken about getting a promotion](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Raise_Your_Profile_e40bad22ef.gif "An overly dramatic recreation of conversations I\'ve had with Joe and Ken")\n\nThis concept of raising my profile has been a common thread throughout my career. When I was a full-time software engineer, my managers talked with me about expanding my scope and demonstrating influence.\n\nPerhaps you\'ve received similar feedback—you need to raise your profile, expand your scope, or demonstrate influence. Or perhaps you\'re doing amazing work and you\'ve been trying to figure out what you need to do in order to get your next promotion.\n\nIn this article, I\'ll answer the following questions:\n\n* [What is your profile?](#what-is-profile)\n* [What does it mean to raise your profile?](#what-raise-profile)\n* [Why should you bother raising your profile?](#why-raise-profile)\n* [What steps can you take to raise your profile?](#steps-raise-profile)\n* [How can you make a plan to raise your profile?](#plan-raise-profile)\n\n> [Luce Carter](https://twitter.com/LuceCarter1) and I recently hosted a live stream on this topic. Check out the recording below: :youtube[]{vid=Z3tgvOZdinM}\n\n## <a name="what-is-profile"></a>What is your profile?\n\nBefore we dig into the "why" and "how," let\'s get on the same page about what your profile is. Your profile describes who you are, what you can do, and what you are known for. Let\'s discuss each piece.\n\n### Who you are\n\nThe first thing people need to know is who you are professionally: things like your name, your role or title, and your company. Internally at your company, people also need to know your location within the company: things like your team, department, organization, and/or manager.\n\nAs an example, here are some facts about who I am:\n\n* Name: Lauren Schaefer\n* Title: Staff Developer Advocate at MongoDB\n* Location in my company: DevRel Team under [Rita Rodrigues](https://twitter.com/RitaMRDevIT)\n\n### What you can do\n\nThe next part of your profile is what you can do. Consider both your technical skills as well as your soft skills.\n\nHere are some things I can do:\n\n* Build web apps in JavaScript and Node.js\n* Discuss MongoDB data modeling best practices\n* Build CI/CD pipelines\n* Keynote conferences\n* Provide team glue through activities like the MongoDB DevRel Book Club\n\n### What you are known for\n\nThe final piece of your profile is what you are known for both internally at your company and externally in the wider developer community. Include technical skills and soft skills (duplicating items from the previous section is totally fine), values, traits, and other things you do.\n\nBelow are some things I\'m known for:\n\n* Creating engaging and easy-to-understand content\n* Completing tasks and projects on time with excellence and minimal supervision\n* Being detail- and action-oriented\n* Advocating for remote work\n* Creating silly [TikToks](https://www.tiktok.com/@lauren_schaefer) about life as a developer\n\n## <a name="what-raise-profile"></a>What does it mean to raise your profile?\n\nNow that we\'re on the same page about what a profile is, let\'s talk about how to "raise" it. Raising your profile means increasing the number of people who know your profile.\n\n<div align="center">\n<figure>\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/raisetheroof_cd5ef2f997.gif" alt="Michael and Dwight raise the roof"/>\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Raising your profile is not the same as raising the roof</figcaption>\n</figure>\n</div>\n\nYou\'ll likely want to work to raise your profile internally at your company and externally in the broader developer community.\n\nWhen considering how to raise your profile internally, think about working your way from your immediate team all the way up to your executive team:\n\n* Team\n* Management\n* Department\n* Company\n* Executive team\n\nWhen considering how to raise your profile externally, you have a variety of options:\n\n* Former colleagues or classmates\n* Local developers\n* Global developer community (in person or online)\n\n## <a name="why-raise-profile"></a>Why should you bother raising your profile?\n\nRaising your profile might seem like a lot of work. If you\'re like me, you\'d probably rather put your head down and get stuff done instead of putting in the effort to let people know about you.\n\nSo why should you bother raising your profile? Let\'s discuss four major reasons.\n\n### Meet *explicit* promotion requirements\n\nRaising your profile is a fairly common theme to see in the promotion requirements for software engineers and developers. Some companies focus more on internal influence while others focus more on external influence. Either way, companies want to see that you have a growing reputation.\n\nLet\'s take a look at some engineering career frameworks, using examples I’ve borrowed from other companies:\n\n* [Patreon\'s Engineering Levels](https://levels.patreon.com/) outlines their expectations for IC1 (Individual Contributor 1) all the way up to IC6 (Individual Contributor 6). The document has several categories including influence. As they move higher up the individual contributor ladder, engineers are expected to broaden their influence throughout the company and eventually to the entire industry.\n* [The Medium Engineering Growth Rubric](https://docs.google.com/spreadsheets/d/1EO-Dbsayn8Nz9Ii3MKcwRbt-EIJ2MjQdpoyhh0tBdZk/edit#gid=1098466721) defines engineers\' growth progression throughout many categories. One of the categories they include is Evangelism. Their engineers progress from influencing "individuals" to "small events" to "large groups" to "the whole industry" to "a wider audience outside the industry."\n* [The Khan Academy Engineering Career Development](https://docs.google.com/document/d/1qr0d05X5-AsyDYqKRCfgGGcWSshTMd_vfTggfhDpbls/edit) document describes how their engineers grow in skills, scope, and experience throughout their careers. The document has a section specifically on "evangelism and public artifacts" with the goal of recruiting top engineers to the company. Khan Academy incentivizes their engineers to share their work with the broader community through activities like blogging, contributing to open source projects, giving tech talks, and participating in meetups and hackathons.\n\n### Meet *implicit* promotion requirements\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181421_c885c6e66a.jpg" alt="Group of peple having a meeting at a conference table filled with laptops and notepads" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nRaising your profile is commonly part of the *implicit* promotion requirements.\n\nEvery company handles promotions differently, but, in most cases, your manager will not be able to give you a promotion on their own. At the lower levels, your manager\'s manager and possibly your manager\'s peers will need to approve your promotion.\n\nAs you get into the higher levels, leaders across your organization and your company will need to agree to your promotion. The management team and executives need to know who you are and the work that you do in order to approve the promotion.\n\n### Take advantage of new opportunities\n\nAs you raise your profile, doors will begin to open for you. Some doors you\'ll strive to open yourself and others will unexpectedly swing open.\n\nBelow are examples of opportunities that may arise as you raise your profile:\n\n* A leadership opportunity\n* A new role at your company\n* A new job at another company\n* An invitation to speak at a conference, a live stream, or a podcast\n* An invitation to write a guest article or author a book\n* New connections with other industry leaders\n\n### Recruit other top developers to work with you\n\n<figure style="clear: both;float: left; margin-left: 0px; margin-bottom: 0px;padding-bottom: 0px;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_linda_ellershein_3127883_55a26ec2ee.jpg" alt="The words \'JOIN OUR TEAM\' spelled out with magnetic letters. Multi colored lollipops surround the words." style="float:left;width:200px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nDevelopers love to work with other amazing developers. As you and your teammates build your profiles, your company\'s reputation will begin to grow. Top developers will want to work with you.\n\nIf your company has referral bonuses, attracting top developers to work with you has a nice monetary perk. Either way, you\'ll get to work with other amazing developers.\n\n\n## <a name="steps-raise-profile" ></a> What steps can you take to raise your profile?\n\nNow that you know what it means to raise your profile and why you should put in the effort to do it, let\'s talk about how you can do it. In this section, I\'ll discuss 10 ways you can raise your profile.\n\n### 1\\. Become the go\\-to person\n\n![Picture of a woman coding with a Python book beside her](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_christina_morillo_1181359_1_bc08a20e58.jpg "Photo by Christina Morillo from Pexels")\n\nBecome the go-to person for a particular language (e.g., Python), a technology (e.g., Kubernetes) or a common challenge that customers face (e.g., how to model data in MongoDB). Be that go-to person for your team or your entire company.\n\nAs an example, Dropbox specifically calls out "Domain Expertise" in their [career framework](https://dropbox.github.io/dbx-career-framework/what_is_impact.html). As their engineers grow their careers, they are expected to be the authority on a platform, a field, or a product category. Dropbox desires for their engineers to grow in depth or breadth.\n\n### 2\\. Contribute to open\\-source or public projects\n\nContributing to open-source or public projects is a great way for other developers to see your work. Being a contributor or a maintainer in a popular open-source project can give you a lot of visibility.\n\nIf, like me, you don\'t enjoy coding in your off-hours, see if there is a way you can code in the open at work. Your company may also see the value in contributing to open-source projects or developing in the open.\n\nYou may also want to create a readme for your GitHub profile page to let people know a little about you. [Joe Karlsson](https://my.link.gallery/joekarlsson) has a nice [60-second tutorial](https://www.tiktok.com/@joekarlsson/video/6943307561995193606) on how you can easily do this with just a markdown file.\n\n### 3\\. Be the news reporter for your team\n\nReporting the news for your team is an easy way to get your name out wider than your core development team. Below are some examples of how you can report the news.\n\n* **Report the news to a cross-functional team.** If someone on your team needs to be a representative as part of a larger cross-functional team, volunteer to be that person. You\'ll bring status updates, but you can also become known as the person who identifies or solves problems as the larger team works together. You can also become known as the expert on your part of the project.\n* **Report the news to the executives.** If someone needs to report status to the executives, volunteer. This is a great way to get to know the executive team as they\'ll see your face on a regular basis.\n* **Curate an internal or external newsletter.** If you\'re not a fan of extra meetings, you can volunteer to curate an internal or external newsletter that provides updates about your piece of the product or the product as a whole. As an example, [Adrienne Tacke](https://twitter.com/AdrienneTacke) posts a weekly newsletter on the [MongoDB Community](https://www.mongodb.com/community/forums/u/yo_adrienne/activity/topics) and [dev.to](https://dev.to/mongodb). The newsletter covers all the amazing things our Developer Advocacy team is doing.\n\nKeep in mind that, depending on your company culture, reporting the news can become seen as a task that has less value than other, more technical tasks. Be sure you tailor the role in a way that gives you a lot of visibility and provides value to others.\n\n### 4\\. Write blog posts or articles\n\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_pixabay_261662_2a2105e249.jpg" alt="Zoomed in picture of a person\'s hands on a laptop while they write on their blog" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Pixabay from Pexels</figcaption>\n</figure>\n\nIf you want to be seen as an expert on something, write about it.\n\nOthers may know more about a topic than you do, but don\'t let that stop you. If you\'re writing about something, people will assume you know what you\'re talking about.\n\nYou can write about things you already know or things you are learning. Writing about topics you don\'t already know is a great way to reinforce your learning.\n\nA multitude of options exist for where you can write:\n\n* Your company may have an engineering blog.\n* You can create your own personal blog.\n* You can use an existing blogging platform like dev.to or Medium that allows you to write without spinning up your own blog.\n\n### 5\\. Give tech talks\n\nGive a tech talk. You can give your talk at a small Lunch and Learn at your company or a huge international conference or anywhere in between. You can even give tech talks online by live streaming on Twitch or YouTube.\n\nWhether you\'re a seasoned expert or brand new to coding, you have a story to tell. You can talk about your favorite technology, best practices, or how you really messed something up (people love failure stories).\n\nMany people have a fear of public speaking. It\'s normal. Don\'t let that fear stop you. Start in small venues where you feel comfortable and take baby steps to other venues.\n\nFor tips on how to get started speaking at conferences, check out [this article](https://bcrecworks.medium.com/an-interview-with-lauren-schaefer-speaker-and-developer-advocate-at-mongodb-2f41ed9aedb5) where I was interviewed about how I got started with public speaking.\n\nIf you\'re interested in speaking about MongoDB at a conference, check out the [MongoDB Community Speakers Program](https://www.mongodb.com/developer/community/speaker-program/). You can apply to work with a speaking coach and get funding to attend a conference.\n\n### 6\\. Post on social media\n\n<figure style="clear: both;float: left; margin-left: 0px;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_tracy_le_blanc_607812_21e69e3608.jpg" alt="Zoomed in picture of a person\'s hand holding a phone that is displaying their social networking apps" style="float:left;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Christina Morillo from Pexels</figcaption>\n</figure>\n\nMaybe you love it or maybe you hate it, but it\'s hard to deny that social media is a great way to raise your profile.\n\nYou can create bite-sized content on platforms like Twitter, LinkedIn, Instagram, and TikTok. Or you can create longer, more in depth content on Twitch, YouTube, or a podcast. Posting to all of those platforms might seem a bit daunting, but you can likely reuse or recycle the same content.\n\nYou may be surprised to learn that posting to social media not only helps you raise your profile externally, it can also help you raise your profile internally. Colleagues who you may not interact with regularly during work hours may see your posts on social media. This has certainly been the case for me as people across MongoDB have been amused with my TikToks that I\'ve posted on LinkedIn.\n\n### 7\\. Lead an employee networking group\n\nLeading an employee networking group is a great way to get connected with other people throughout your company and demonstrate leadership. Sometimes executives join these groups, providing you with an opportunity to get to know them in an informal setting.\n\nCompanies have different names for employee networking groups. I\'ve also heard them called affinity groups or business resource groups. These are groups at your company for a particular set of people with a common interest or demographic.\n\nI will add a caveat to this recommendation. Some companies really value the work people do in leading these networking groups. Other companies see these as nice-to-have groups that don\'t provide a lot of value to the business. Be sure you can frame your work in these groups in a way that matters to your management team.\n\n### 8\\. Attend\\, host\\, or speak at a meetup or hackathon\n\nMeetups and hackathons allow you to get connected with other people in your local community. You never know what opportunities will arise from these connections.\n\nHosting a meetup doesn\'t require any technical skills, but, if you execute the meetups consistently, people will see you as a leader in your local tech community. Attending and asking thoughtful questions will also aid in you being seen as a technical leader.\n\n### 9\\. Answer questions publicly online\n\nAnswering questions publicly online in forums provides value to others and increases your name recognition. Be sure your answers are kind, thoughtful, and accurate. As you begin to answer questions more regularly, your reputation will grow.\n\nIf you\'d like to give this a try, join the [MongoDB Community](http://community.mongodb.com/). You can share your tips, tricks, and best practices with others.\n\n![Screenshot of the front page of the MongoDB Community](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_12_18_58_PM_a092a9ab07.png "Join us in the MongoDB Community")\n\n### 10\\. Advertise your work\n\n<figure style="clear: both;float: right;">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/pexels_andrea_piacquadio_3761509_df6dee482b.jpg" alt="Picture of a woman happily shouting into a megaphone" style="float:right;width:400px;margin-bottom: 10px;" />\n<figcaption style="color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;">Photo by Andrea Piacquadio from Pexels</figcaption>\n</figure>\n\nMy last tip for you and, possibly the most important, is to advertise your work. A variety of options for advertising your work exist. Tailor the way you do this to your company culture and your personal style.\n\nIf you have a daily scrum or a weekly status meeting, show up ready to talk about what you\'ve accomplished since the last meeting.\n\nWhen you meet someone new, be ready with your elevator pitch. Practice your pitch, so you\'ll be comfortable and confident when the time comes.\n\nCapture any compliments you receive and make sure your management team sees them. For example, if someone tweets that they found this article really helpful 😉, I\'ll retrieve the link to the tweet and forward it to my manager. If someone gives me a compliment verbally, I ask them to send me an email with the compliment so I can forward it to my manager.\n\nI also have a document where I keep a running list of every compliment I receive. When it\'s time for me to write my performance review, I organize the compliments and paste them directly into my review. This provides my management team with tangible evidence that I\'m doing my job well.\n\nIf possible, find a manager who is good at advertising your work as well. I\'ve been very fortunate that my director (my manager\'s manager) acts as a sponsor for me. He speaks well of me when I\'m not in the room. If I send him a really good compliment, he forwards it on to his manager. This means that the executive team isn\'t only hearing about me at performance review time—they\'re hearing positive things about me throughout the year.\n\n###\n## <a name="plan-raise-profile"></a>How can you make a plan to raise your profile?\n\nI hope this article has encouraged you to raise your profile and provided you with practical steps you can take. But I don\'t want it to stop there. I encourage you to make a plan.\n\nI\'ve created a [How to Raise Your Profile Worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) you can use to make a plan and stick to it.\n\n<div align="center">\n<a href="https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet">\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_34_AM_fbf3fb1356.png" alt="Screenshot of the first page of the How to Raise Your Profile Worksheet" height="470" />\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/Screen_Shot_2021_10_01_at_10_25_49_AM_f1ec211446.png" alt="Screenshot of the second page of the How to Raise Your Profile Worksheet" height="470" />\n</a>\n</div> \n\nThe first page of the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) helps you identify what your profile is and how you want it to evolve. The second page of the worksheet asks you to select what actions you can take this week, this month, and this year to raise your profile. It also asks you to describe how you will evaluate if those actions are successful and how you will hold yourself accountable.\n\nI encourage you to print out the [worksheet](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) and spend some time making a plan that works for you. Talk about your plan with a friend or mentor. Regularly revisit your plan to track your progress and see what actions you can take next.\n\n## Summary\n\nRaising your profile internally at your company and externally in the broader developer community is an important part of growing your career as a developer. A variety of ways exist to let people know who you are and what you can do. [Make a plan to raise your profile](https://www.slideshare.net/LaurenHaywardSchaefe/how-to-raise-your-profile-worksheet) little by little over time.\n\nI can\'t wait to hear about you in the coming weeks and months!',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/a1',
        },
        {
            authors: [],
            category: 'Article',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is 102 article',
            description: 'This is my second article',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/a2',
        },
        {
            authors: [],
            category: 'Article',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is 103 article',
            description: 'This is my third article',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/a3',
        },
        {
            authors: [],
            category: 'Article',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is 104 article',
            description: 'This is my fourth article',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/a4',
        },
        {
            authors: [],
            category: 'Tutorial',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is a 102 tutorial',
            description:
                "Welcome (or welcome back!) to the SQL to MongoDB series. In the first post in this series, I [mapped terms and concepts from SQL to MongoDB](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb).\n\nI also introduced you to Ron. Let's take a moment and return to Ron. Ron is pretty set in his ways. For example, he loves his typewriter. It doesn't matter that computers are a bajillion times more powerful than typewriters. Until someone convinces him otherwise, he's sticking with his typewriter.\n\n<figure align=\"center\">\n    <img\n        style=\"border-radius: 10px\"\n        src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/typewriter.gif\"\n        alt=\"Ron sits at his typewriter and says 'I'm gonna type every word I know'\"\n    />\n</figure>\n\nMaybe you don't have a love for typewriters. But perhaps you have a love for SQL databases. You've been using them for years, you've learned how to make them work well enough for you, and you know that learning MongoDB will require you to change your mindset. Is it really worth the effort?\n\nYes!\n\nIn this post, we'll examine the top four reasons why you should use MongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\n> This article is based on a presentation I gave at MongoDB World and MongoDB.local Houston entitled \"From SQL to NoSQL: Changing Your Mindset.\"\n> \n> If you prefer videos over articles, check out the [recording](https://youtu.be/FFj04Apz_BE). Slides are available [here](https://www.slideshare.net/LaurenHaywardSchaefe/jumpstart-from-sql-to-nosql-changing-your-mindset).\n\n## Scale Cheaper\n\nYou can scale cheaper with MongoDB. Why?\n\nLet's begin by talking about scaling SQL databases. Typically, SQL databases scale vertically-when a database becomes too big for its server, it is migrated to a larger server.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/verticalscaling.gif\" class=\"align-center\" alt=\"Vertical scaling by migrating to larger servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Vertical scaling by migrating to larger servers</figcaption></figure>\n\nA few key problems arise with vertical scaling:\n\n* Large servers tend to be more expensive than two smaller servers with the same total capacity.\n* Large servers may not be available due to cost limitations, cloud provider limitations, or technology limitations (a server the size you need may not exist).\n* Migrating to a larger server may require application downtime.\n\nWhen you use MongoDB, you have the flexibility to scale horizontally through [sharding](https://docs.mongodb.com/manual/sharding/). Sharding is a method for distributing data across multiple servers. When your database exceeds the capacity of its current server, you can begin sharding and split it over two servers. As your database continues to grow, you can continue to add more servers. The advantage is that these new servers don't need to be big, expensive machines-they can be cheaper, commodity hardware. Plus, no downtime is required.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/horizontalscaling.gif\" class=\"align-center\" alt=\"Horizonal scaling by adding more commodity servers\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">Horizonal scaling by adding more commodity servers</figcaption></figure>\n\n## Query Faster\n\nYour queries will typically be faster with MongoDB. Let's examine why.\n\n[Even in our simple example in the previous post](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#example-documents) where we modeled Leslie's data in SQL, we saw that her information was spread across three tables. Whenever we want to query for Leslie's information, we'll need to join three tables together.\n\nIn these three small tables, the join will be very fast. However, as the tables grow and our queries become more complex, joining tables together becomes very expensive.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/db_joins.png\" class=\"align-center\" alt=\"Representation of joining tables in a SQL database\">\n\nRecall our rule of thumb when modeling data in MongoDB: *data that is accessed together should be stored together*. When you follow this rule of thumb, most queries will not require you to join any data together.\n\nContinuing with our earlier example, if we want to retrieve Leslie's information from MongoDB, we can simply query for a single document in the `Users` collection. As a result, our query will be very fast.\n\nAs our documents and collections grow larger, we don't have to worry about our queries slowing down as long as we are using indexes and continue following our rule of thumb: *data that is accessed together should be stored together*.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/dbnojoins.png\" class=\"align-center\" alt=\"Representation of a MongoDB query with no joins\">\n\n## Pivot Easier\n\nRequirements change. Sometimes the changes are simple and require only a\nfew tweaks to the user interface. But sometimes changes go all the way\ndown to the database.\n\nIn the previous post in this series, we discovered—after implementing\nour application—that we needed to [store information about Lauren's school](https://www.mongodb.com/developer/article/map-terms-concepts-sql-mongodb/#std-label-sql-mdb-1-store-laurens-info).\nLet's take a look at this example a little more closely.\n\nTo add a new `school` column in our SQL database, we're going to have to\nalter the `Users` table. Executing the `Alter Table` command could take\na couple of hours depending on how much data is in the table. The\nperformance of our application could be decreased while the table is\nbeing altered, and we may need to schedule downtime for our application.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_parksandrec.png\" class=\"align-center\" alt=\"Alter Table command\">\n\nNow let's examine how we can do something similar in MongoDB. When our\nrequirements change and we need to begin storing the name of a user's\nschool in a `User` document, we can simply begin doing so. We can choose\nif and when to update existing documents in the collection.\n\nIf we had implemented schema validation, we would have the option of\napplying the validation to all inserts and updates or only to inserts\nand updates to documents that already meet the schema requirements. We\nwould also have the choice of throwing an error or a warning if a\nvalidation rule is violated.\n\nWith MongoDB, you can easily change the shape of your data as your app\nevolves.\n\n<img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/altertable_mongo.png\" class=\"align-center\" alt=\"Change the shape of your data in MongoDB without executing an Alter Table command\">\n\n## Program Faster\n\nTo be honest with you, this advantage is one of the biggest surprises to\nme. I figured that it didn't matter what you used as your backend\ndatabase—the code that interacts with it would be basically the same. I\nwas wrong.\n\n<figure><img src=\"https://www.mongodb.com/developer/images/article/sql-to-mdb/bensurprise.gif\" class=\"align-center\" alt=\"MFW I realized how much easier it is to code with MongoDB.\">\n<figcaption style=\"color: rgb(184, 196, 194); font-size: 12px; line-height: 18px;\">MFW I realized how much easier it is to code with MongoDB.</figcaption></figure>\n\nMongoDB documents map to data structures in most popular programming languages. This sounds like such a simple thing, but it makes a *humongous* difference when you're writing code.\n\nA friend encouraged me to test this out, so I did. I implemented the code to retrieve and update user profile information. My code has some simplifications in it to enable me to focus on the interactions with the database rather than the user interface. I also limited the user profile information to just contact information and hobbies.\n\nBelow is a comparison of my implementation using [MySQL](https://www.mysql.com) and MongoDB.\n\nI wrote the code in Python, but, don't worry if you're not familiar with Python, I'll walk you through it step by step. The concepts will be applicable no matter what your programming language of choice is.\n\n### Connect to the Databases\n\nLet's begin with the typical top-of-the-file stuff. We'll import what we need, connect to the database, and declare our variables. I'm going to simplify things by hardcoding the User ID of the user whose profile we will be retrieving rather than pulling it dynamically from the frontend code.\n\nMySQL\n\n``` python\nimport mysql.connector\n\n# CONNECT TO THE DB\nmydb = mysql.connector.connect(\n   host=\"localhost\",\n   user=\"root\",\n   passwd=\"rootroot\",\n   database=\"CityHall\"\n)\nmycursor = mydb.cursor(dictionary=True)\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nWe'll pass the [dictionary=True](https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursordict.html) option when we create the cursor so that each row will be returned as a dictionary.\n\nMongoDB\n\n``` python\nimport pymongo\nfrom pymongo import MongoClient\n\n# CONNECT TO THE DB\nclient = MongoClient()\nclient = pymongo.MongoClient(\"mongodb+srv://root:rootroot@mycluster.mongodb.net/test?retryWrites=true&w=majority\")\ndb = client.CityHall\n\n# THE ID OF THE USER WHOSE PROFILE WE WILL BE RETRIEVING AND UPDATING\nuserId = 1\n```\n\nSo far, the code is pretty much the same.\n\n### Get the User's Profile Information\n\nNow that we have our database connections ready, let's use them to retrieve our user profile information. We'll store the profile information in a [Python Dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries). Dictionaries are a common data structure in Python and provide an easy way to work with your data.\n\nLet's begin by implementing the code for MySQL.\n\nSince the user profile information is spread across the `Users` table and the `Hobbies` table, we'll need to join them in our query. We can use [prepared statements](https://en.wikipedia.org/wiki/Prepared_statement) to ensure our data stays safe.\n\nMySQL\n\n``` python\nsql = \"SELECT * FROM Users LEFT JOIN Hobbies ON Users.ID = Hobbies.user_id WHERE Users.id=%s\"\nvalues = (userId,)\nmy cursor.execute(sql, values)\nuser = mycursor.fetchone()\n```\n\nWhen we execute the query, a result is returned for every user/hobby combination. When we call `fetchone()`, we get a dictionary like the following:\n\n``` python\n{u'city': u'Pawnee', u'first_name': u'Leslie', u'last_name': u'Yepp', u'user_id': 1, u'school': None, u'longitude': -86.5366, u'cell': u'8125552344', u'latitude': 39.1703, u'hobby': u'scrapbooking', u'ID': 10}\n```\n\nBecause we joined the `Users` and the `Hobbies` tables, we have a result for each hobby this user has. To retrieve all of the hobbies, we need to iterate the cursor. We'll append each hobby to a new `hobbies` array and then add the `hobbies` array to our `user` dictionary.\n\nMySQL\n\n``` python\nhobbies = []\nif (user[\"hobby\"]):\n  hobbies.append(user[\"hobby\"])\ndel user[\"hobby\"]\ndel user[\"ID\"]\nfor result in mycursor:\n  hobbies.append(result[\"hobby\"])\nuser[\"hobbies\"] = hobbies\n```\n\nNow let's implement that same functionality for MongoDB.\n\nSince we stored all of the user profile information in the `User` document, we don't need to do any joins. We can simply retrieve a single document in our collection.\n\nHere is where the big advantage that *MongoDB documents map to data structures in most popular programming languages* comes in. I don't have to do any work to get my data into an easy-to-work-with Python Dictionary. MongoDB gives me all of the results in a Python Dictionary automatically.\n\nMongoDB\n\n``` python\nuser = db['Users'].find_one({\"_id\": userId})\n```\n\nAnd that's it—we're done. What took us 12 lines for MySQL, we were able to implement in 1 line for MongoDB.\n\nOur `user` dictionaries are now pretty similar in both pieces of code.\n\nMySQL\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'school': None, \n   'cell': '8125552344', \n   'latitude': 39.1703,\n   'longitude': -86.5366,3\n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   'user_id': 1\n}\n```\n\nMongoDB\n\n``` json\n{\n   'city': 'Pawnee', \n   'first_name': 'Leslie', \n   'last_name': 'Yepp', \n   'cell': '8125552344', \n   'location': [-86.536632, 39.170344], \n   'hobbies': ['scrapbooking', 'eating waffles', 'working'],\n   '_id': 1\n}\n```\n\nNow that we have retrieved the user's profile information, we'd likely send that information up the stack to the frontend UI code.\n\n### Update the User's Profile Information\n\nWhen Leslie views her profile information in our application, she may discover she needs to update her profile information. The frontend UI code would send that updated information in a Python dictionary to the Python files we've been writing.\n\nTo simulate Leslie updating her profile information, we'll manually update the Python dictionary ourselves for both MySQL and MongoDB.\n\nMySQL\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"latitude\": 38.897760,\n   \"longitude\": -77.036809,\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nMongoDB\n\n``` python\nuser.update( {\n   \"city\": \"Washington, DC\",\n   \"location\": [-77.036809, 38.897760],\n   \"hobbies\": [\"scrapbooking\", \"eating waffles\", \"signing bills\"]\n   } )\n```\n\nNow that our `user` dictionary is updated, let's push the updated information to our databases.\n\nLet's begin with MySQL. First, we need to update the information that is stored in the `Users` table.\n\nMySQL\n\n``` python\nsql = \"UPDATE Users SET first_name=%s, last_name=%s, cell=%s, city=%s, latitude=%s, longitude=%s, school=%s WHERE (ID=%s)\"\nvalues = (user[\"first_name\"], user[\"last_name\"], user[\"cell\"], user[\"city\"], user[\"latitude\"], user[\"longitude\"], user[\"school\"], userId)\nmycursor.execute(sql, values)\nmydb.commit()\n```\n\nSecond, we need to update our hobbies. For simplicity, we'll delete any existing hobbies in the `Hobbies` table for this user and then we'll insert the new hobbies into the `Hobbies` table.\n\nMySQL\n\n``` python\nsql = \"DELETE FROM Hobbies WHERE user_id=%s\"\nvalues = (userId,)\nmycursor.execute(sql, values)\nmydb.commit()\n\nif(len(user[\"hobbies\"]) > 0):\n   sql = \"INSERT INTO Hobbies (user_id, hobby) VALUES (%s, %s)\"\n   values = []\n   for hobby in user[\"hobbies\"]:\n      values.append((userId, hobby))\n   mycursor.executemany(sql,values)\n   mydb.commit()\n```\n\nNow let's update the user profile information in MongoDB. Since the user's profile information is stored in a single document, we only have to do a single update. Once again we will benefit from MongoDB documents mapping to data structures in most popular programming languages. We can send our `user` Python dictionary when we call `update_one()`, which significantly simplifies our code.\n\nMongoDB\n\n``` python\nresult = db['Users'].update_one({\"_id\": userId}, {\"$set\": user})\n```\n\nWhat took us 15 lines for MySQL, we were able to implement in 1 line for\nMongoDB.\n\n### Summary of Programming Faster\n\nIn this example, we wrote 27 lines of code to interact with our data in\nMySQL and 2 lines of code to interact with our data in MongoDB. While\nfewer lines of code is not always indicative of better code, in this\ncase, we can probably agree that fewer lines of code will likely lead to\neasier maintenance and fewer bugs.\n\nThe examples above were relatively simple with small queries. Imagine\nhow much bigger the difference would be for larger, more complex\nqueries.\n\nMongoDB documents mapping to data structures in most popular programming\nlanguages can be a huge advantage in terms of time to write, debug, and\nmaintain code.\n\nThe code above was written in Python and leveraged the Python MongoDB\nDriver. For a complete list of all of the programming languages that\nhave MongoDB drivers, visit the [MongoDB Manual](https://docs.mongodb.com/ecosystem/drivers/#drivers).\n\nIf you'd like to grab a copy of the code in the examples above, visit my\n[GitHub repo](https://github.com/mongodb-developer/SQL-to-NoSQL-Examples).\n<br>\n## Wrap Up\n\nIn this post, we discussed the top four reasons why you should use\nMongoDB:\n\n* [Scale Cheaper](#scale-cheaper)\n* [Query Faster](#query-faster)\n* [Pivot Easier](#pivot-easier)\n* [Program Faster](#program-faster)\n\nBe on the lookout for the final post in this series where I'll discuss\nthe top three things you need to know as you move from SQL to MongoDB.\n",
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: true,
            slug: 'product/atlas/t1',
        },
        {
            authors: [],
            category: 'Tutorial',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is a 101 tutorial',
            description:
                "## Updates\n\n### August 20st, 2020\n\n- Removed links to Thomas's dashboard as it's not supported anymore.\n- Updated some Charts in the dashboard as [JHU discontinued the recovered cases](https://github.com/CSSEGISandData/COVID-19/issues/4465).\n\n### April 21st, 2020\n\n- [MongoDB Open Data COVID-19](https://www.mongodb.com/developer/article/johns-hopkins-university-covid-19-data-atlas/) is now available on the new [MongoDB Developer Hub](https://www.mongodb.com/developer/).\n- You can check our code samples in [our Github repository](https://github.com/mongodb-developer/open-data-covid-19).\n- The JHU dataset changed again a few times. It's not really stable and it makes it complicated to build something reliable on top of this service. This is the reason why we created our more accessible version of the JHU dataset.\n- It's the same data but transformed in JSON documents and available in a readonly MongoDB Cluster we built for you.\n\n### March 24th, 2020\n\n- [Johns Hopkins University](https://www.jhu.edu/) changed the dataset they release daily.\n- I created a [new dashboard based using the new dataset](https://charts.mongodb.com/charts-open-data-covid-19-zddgb/public/dashboards/60da4f45-f168-434a-82f6-d37ce88ff9ea).\n- My new dashboard updates **automatically every hour** as new data comes in.\n\n## Too Long, Didn't Read\n\n[Thomas Rueckstiess](https://www.linkedin.com/in/rueckstiess/) and [myself](https://www.linkedin.com/in/maximebeugnet) came up with two [MongoDB Charts](https://www.mongodb.com/products/charts) dashboards with the Coronavirus dataset.\n\n>-   Check out [Maxime's dashboard](https://charts.mongodb.com/charts-open-data-covid-19-zddgb/public/dashboards/60da4f45-f168-434a-82f6-d37ce88ff9ea).\n>-   Check out Thomas's dashboard (not supported anymore).\n\nHere is an example of the charts we made using the Coronavirus dataset. More below and in the MongoDB Charts dashboards.\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4266-8264-d37ce88ff9fa theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-479c-83b2-d37ce88ffa07 theme=dark autorefresh=3600}\n\n## Let The Data Speak\n\nWe have to make decisions at work every day.\n\n- Should we discontinue this project?\n- Should we hire more people?\n- Can we invest more in this branch? How much?\n\nLeaders make decisions. Great leaders make informed decisions, based on facts backed by data and not just based on assumptions, feelings or opinions.\n\nThe management of the Coronavirus outbreak obeys the same rules. To make the right decisions, we need accurate data.\n\nData about the Coronavirus is relatively easy to find. The [Johns Hopkins University](https://www.jhu.edu/) has done a terrific job at gathering, cleaning and curating data from various sources. They wrote [an excellent blog post](https://systems.jhu.edu/research/public-health/ncov/) which I encourage you to read.\n\nHaving data is great but it can also be overwhelming. That's why data visualisation is also very important. Data alone doesn't speak and doesn't help make informed decisions.\n\n[Johns Hopkins University](https://www.jhu.edu/) also did a great job on this part because they provided [this dashboard](https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6) to make this data more human accessible.\n\nThis is great... But we can do even better visualisations with [MongoDB Charts](https://www.mongodb.com/products/charts).\n\n## Free Your Data With MongoDB Charts\n\n[Thomas Rueckstiess](https://www.linkedin.com/in/rueckstiess/) and I imported all the data from Johns Hopkins University (and we will keep importing new data as they are published) into a MongoDB database. If you are interested by the data import, you can check my [Github repository](https://github.com/mongodb-developer/open-data-covid-19).\n\nThen we used this data to produce a dashboard to monitor the progression of the virus.\n\n>Here is [Maxime's dashboard](https://charts.mongodb.com/charts-open-data-covid-19-zddgb/public/dashboards/60da4f45-f168-434a-82f6-d37ce88ff9ea). It's shared publicly for the greater good.\n\n[MongoDB Charts](https://www.mongodb.com/products/charts) also allows you to embed easily charts within a website... or a blog post.\n\nHere are a few of the graphs I was able to import in here with just two clicks.\n\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\nAs you can see, [MongoDB Charts](https://www.mongodb.com/products/charts) is really powerful and super easy to embed.\n\n## Participation\n\nIf you have a source of data that provides different or more accurate data about this virus. Please let me know on Twitter [@MBeugnet](https://twitter.com/mbeugnet) or in the [MongoDB community website](https://community.mongodb.com/). I will do my best to update this data and provide more charts.\n\n## Sources\n\n- [MongoDB Open Data COVID-19 - Blog Post](https://developer.mongodb.com/article/johns-hopkins-university-covid-19-data-atlas).\n- [MongoDB Open Data COVID-19 - Github Repo](https://github.com/mongodb-developer/open-data-covid-19).\n- [Dashboard](https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6) from [Johns Hopkins University](https://www.jhu.edu/).\n- [Blog post from Johns Hopkins University](https://systems.jhu.edu/research/public-health/ncov/).\n- [Public Google Spreadsheet (old version) - deprecated](https://docs.google.com/spreadsheets/d/1yZv9w9zRKwrGTaR-YzmAqMefw4wMlaXocejdxZaTs6w/htmlview?usp=sharing&sle=true#).\n- [Public Google Spreadsheet (new version) - deprecated](https://docs.google.com/spreadsheets/d/1wQVypefm946ch4XDp37uZ-wartW4V7ILdg-qYiDXUHM/edit?usp=sharing).\n- [Public Google Spreadsheet (Time Series) - deprecated](https://docs.google.com/spreadsheets/d/1UF2pSkFTURko2OvfHWWlFpDFAr1UxCBA4JLwlSP6KFo/edit?usp=sharing).\n- [Github Repository with CSV dataset from Johns Hopkins University](https://github.com/CSSEGISandData/COVID-19).\n- Image credit: [Scientific Animations](http://www.scientificanimations.com/wiki-images/) (CC BY-SA 4.0).\n",
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/t2',
        },
        {
            authors: [],
            category: 'Tutorial',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'This is a 103 tutorial',
            description:
                '## First heading\n\nSome content goes \n\n![](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_9510a23556.png)\n\n<img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_9510a23556.png" alt="Girl in a jacket" width="500" height="600">\n\n<br />\ndsndvbdsf\n\n``` python\ndef f(x):\n    print(x)\n```\n\n\n::::tabs\n:::tab[]{tabid="Javascript"}\n```\nconst j = 123\nconst i = 456\n```\n:::\n:::tab[]{tabid="Python"}\n```\nj = 789\ni = 000\n```\n:::\n::::\n\n\n![tiger image dir](https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/puppy_avif_31ad68d544.AVIF)\n\n\n<figure align="center">\n<img alt="Data Access Triangle with shared data, duplicated data and isolated data." src="https://www.mongodb.com/developer/images/article/six-principles-resilient-evolvability/triangle.png" />\n</figure>\n\n\n## Second Heading\n\nSome additional content\n\n* Action item\n* Action item 2\n\n## Third Heading\n\nMore content, go to [DevHub home](https://developer.mongodb.com/)\n\n:charts[]{url=https://charts.mongodb.com/charts-storage-costs-sbekh id=740dea93-d2da-44c3-8104-14ccef947662}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4593-8e0e-d37ce88ffa15 theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-43e7-8a6d-d37ce88ffa30 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-42b4-8b88-d37ce88ffa3a theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-44c9-87f5-d37ce88ffa34 theme=light autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-41a8-8106-d37ce88ffa2c theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-4cdc-8686-d37ce88ff9fc theme=dark autorefresh=3600}\n\n:charts[]{url=https://charts.mongodb.com/charts-open-data-covid-19-zddgb id=60da4f45-f168-47fd-88bd-d37ce88ffa0d theme=light autorefresh=3600 width=760 height=1000}\n\n### Fourth heading\n\n\n| Header 1 | Header 2 |\n| --- | --- |\n| <div style="width: 400px;">:youtube[]{vid=iz37fDe1XoM} </div> |  <img src="https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/prof_27cd26e2be.JPG" width="100px">\n\n\n> \n>:youtube[]{vid=iz37fDe1XoM}\n>\n\n:youtube[]{vid=iz37fDe1XoM}\n\n>\n>\n>:youtube[]{vid=8CZs-0it9r4 start=720 end=840}\n>\n>Prefer to learn by video? I\'ve got you covered.\n>\n>\n:youtube[]{vid=8CZs-0it9r4 start=720}',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/t3',
        },
        {
            category: 'Podcast',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'MongoDB Podcast: Episode 23',
            description: 'Some podcast details',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/p1',
        },
        {
            category: 'Podcast',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'MongoDB Podcast: Episode 96',
            description: 'Some podcast details',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/p2',
        },
        {
            category: 'Podcast',
            image: {
                alt: 'thumbnail',
                url: 'https://mongodb-devhub-cms.s3.us-west-1.amazonaws.com/ATF_720x720_17fd9d891f.png',
            },
            title: 'MongoDB Podcast: Episode 2',
            description: 'Some podcast details',
            contentDate: new Date().toDateString(),
            tags: MOCK_ARTICLE_TAGS,
            featured: false,
            slug: 'product/atlas/p3',
        },
    ];
    const returnContent =
        slug === 'atlas'
            ? content
            : slug === 'data-lake'
            ? content.slice(0, 10)
            : slug === 'vs-code'
            ? content.slice(0, 5)
            : slug === 'all'
            ? content
            : [];
    return { content: returnContent, featured };
};

export default getL1Content;
